{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/flex-block/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/flex-block/source/icons-512.png","path":"icons-512.png","modified":0,"renderable":1},{"_id":"themes/flex-block/source/icons-192.png","path":"icons-192.png","modified":0,"renderable":1},{"_id":"themes/flex-block/source/manifest.json","path":"manifest.json","modified":0,"renderable":1},{"_id":"themes/flex-block/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/flex-block/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"6baa8b015fc3c4abc65ee9243c05339452235d56","modified":1666229290194},{"_id":"source/_data/links.yml","hash":"d58155eb5eac716cc4666041cb098fd426b88f88","modified":1665709268365},{"_id":"source/_posts/数据库.md","hash":"e6fafdb9f360081712b53719a48b0dab4b45dd02","modified":1665661480313},{"_id":"source/_posts/front-matter配置.md","hash":"42dddb517fac1d9b24e076c024ab26247353ad5d","modified":1666003836436},{"_id":"source/categories/index.md","hash":"7a9da0159dcec6b5d861b06c7d985552b1d16d10","modified":1665674753618},{"_id":"source/_posts/hive.md","hash":"f9afc9f2c97d06d78d4cb0105e15236cb0a68050","modified":1665676948059},{"_id":"source/_posts/git常用命令.md","hash":"0946bfba45570432c6d4efd5abeadafe30a6966c","modified":1666228853784},{"_id":"source/_posts/波尔登森林公园一游.md","hash":"3650f68eac4ef5d2e3b4b721653a1eaabc8e5dc1","modified":1666004162532},{"_id":"source/message/index.md","hash":"572d464d84ca4cc05499218ee2a9988020be9ac8","modified":1665496469194},{"_id":"source/links/index.md","hash":"f51a95064af5040d021bd5b5e28086f7f30341db","modified":1665496706129},{"_id":"source/_posts/灵活排位日记.md","hash":"b00078976a8406b3acf48529db0caa021d056a3a","modified":1666004193490},{"_id":"source/_posts/.idea/_posts.iml","hash":"0ebd6917294eeae93d8971bca16a042d6529f04c","modified":1665106151653},{"_id":"source/_posts/青梅竹马，两小无猜.md","hash":"80ebdbda4d2b4ca3bed0e841a792d1da25c99f36","modified":1666004228164},{"_id":"source/_posts/.idea/misc.xml","hash":"0d81a7654b3ab7b1fa88a882ac9120820be781d1","modified":1665106151673},{"_id":"source/_posts/.idea/modules.xml","hash":"45e5dd6213ed107bcf94d662d57092aba2b0b157","modified":1665106151686},{"_id":"source/_posts/.idea/workspace.xml","hash":"e3126eb21d177f083b646c19221e64e881cd4456","modified":1665106151662},{"_id":"source/_posts/.idea/vcs.xml","hash":"c75f6a9f73d6a593959bbeeb5c8d00a5d919408c","modified":1665106151679},{"_id":"source/_posts/.idea/inspectionProfiles/profiles_settings.xml","hash":"123097fe0d1ca811d1a355725d7066386ed490ec","modified":1665106151698},{"_id":"themes/flex-block/.gitignore","hash":"705b1b2062454bbf1210389b79ba6e61c3534417","modified":1664159520995},{"_id":"themes/flex-block/layout/archive.ejs","hash":"31199b59d95f43e89c78df799735bb03b4f2cdc6","modified":1664159521038},{"_id":"themes/flex-block/_config.yml","hash":"27f1c23b5cbaea255fda16ba5069ce0a88bf2c6d","modified":1666228646539},{"_id":"themes/flex-block/layout/category.ejs","hash":"5551f6309ac4f835bd135ebb35fd40ba961f09b3","modified":1664159521039},{"_id":"themes/flex-block/layout/index.ejs","hash":"b2d5cf681e351c2cdfd5f549bddc4f428812fd36","modified":1664159521039},{"_id":"themes/flex-block/LICENSE","hash":"b39804556d3cc20997aca34c37ff896235078e86","modified":1664159520995},{"_id":"themes/flex-block/layout/page.ejs","hash":"4aaf6496c9e4c61355bbed51ea0bf15023d8bcf3","modified":1664159521041},{"_id":"themes/flex-block/layout/post.ejs","hash":"f4de584f9181669b301e43c4f30439f57c959108","modified":1664159521041},{"_id":"themes/flex-block/layout/layout.ejs","hash":"19b928ffc0a5f69b008bad6443fb5ffa770e623a","modified":1664159521041},{"_id":"themes/flex-block/layout/tag.ejs","hash":"4621d964e6505fdc19ae270918ea08356cc5c789","modified":1664159521041},{"_id":"themes/flex-block/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1664159520995},{"_id":"themes/flex-block/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1664159520995},{"_id":"themes/flex-block/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1664159520995},{"_id":"themes/flex-block/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1664159521003},{"_id":"themes/flex-block/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1664159520995},{"_id":"themes/flex-block/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1664159521003},{"_id":"themes/flex-block/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1664159521005},{"_id":"themes/flex-block/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1664159521006},{"_id":"themes/flex-block/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1664159521006},{"_id":"themes/flex-block/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1664159521006},{"_id":"themes/flex-block/languages/zh-CN.yml","hash":"fb8f221242b3997833189f11cd14407a867de3b8","modified":1664159521006},{"_id":"themes/flex-block/scripts/index.js","hash":"e00e74493126a87c378e8fda97b0fe7272e1e054","modified":1664159521059},{"_id":"themes/flex-block/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1664159521006},{"_id":"themes/flex-block/source/manifest.json","hash":"6689646167bbe5bc836615a0c2019ea9aaa9e015","modified":1664159521084},{"_id":"themes/flex-block/source/favicon.ico","hash":"cd1b610096d9c5c780fd2a7e24baaa78dada3163","modified":1664159521073},{"_id":"themes/flex-block/source/icons-192.png","hash":"8cd106d9039f1d5aa8163ecd4a5e352058a0f6cf","modified":1664159521073},{"_id":"themes/flex-block/layout/_svg/icon-article.svg","hash":"f89ab250586cf0bd8108b77e48a5288f1d0dd512","modified":1664159521018},{"_id":"themes/flex-block/layout/_svg/icon-tags.svg","hash":"0d974ce6d089d08ef009ad56d1b5d66bf9c2c1e6","modified":1664159521018},{"_id":"themes/flex-block/layout/_svg/icon-categories.svg","hash":"cfe4012051132281255e211c28971e05726cdc43","modified":1664159521018},{"_id":"themes/flex-block/layout/_svg/icon-notice.svg","hash":"0d2f705ca65673eda3d38420aa512d83fcbc1e72","modified":1664159521018},{"_id":"themes/flex-block/layout/_svg/icon-toc.svg","hash":"05d2eecfb27deade461f25b2a396c230e18cd6b4","modified":1664159521018},{"_id":"themes/flex-block/layout/_svg/social-github.svg","hash":"880c135b980866f77047cd4507f5bf8671934333","modified":1664159521018},{"_id":"themes/flex-block/layout/_partial/article-list.ejs","hash":"33ce0492d8b3731d99f4ddf98664841770400777","modified":1664159521011},{"_id":"themes/flex-block/layout/_svg/social-twitter.svg","hash":"acb180ecf694e6b91a309e9247d691200f5540ac","modified":1664159521026},{"_id":"themes/flex-block/layout/_svg/social-ins.svg","hash":"aad8cb2136a7c8af682d9c9dae726b80ee1b57dd","modified":1664159521026},{"_id":"themes/flex-block/layout/_partial/footer-other.ejs","hash":"9e93e20f3e3ded687abe00a6478e3c4dbfff479e","modified":1664159521011},{"_id":"themes/flex-block/layout/_svg/social-zhihu.svg","hash":"9f46e99ec2a82ab4d85f38a6771378cddd83a70a","modified":1664159521028},{"_id":"themes/flex-block/layout/_svg/social-weibo.svg","hash":"a10c19805388d60e9532a44db09f4d117fb4f1cf","modified":1664159521027},{"_id":"themes/flex-block/layout/_partial/content.ejs","hash":"ff5fb3bd02681529ce3f6f52d74e11c951bc5e83","modified":1664159521011},{"_id":"themes/flex-block/layout/_partial/footer-script.ejs","hash":"2af1fd98adfd3beafcbaf5555781fcccb910451c","modified":1664159521011},{"_id":"themes/flex-block/layout/plug-in/aplayer.ejs","hash":"438336577656019044851a9fd534b42f954aa51d","modified":1664159521041},{"_id":"themes/flex-block/layout/_partial/footer.ejs","hash":"1dc4ef7064687955c3e37d79597258166c33110c","modified":1664159521011},{"_id":"themes/flex-block/layout/_partial/header.ejs","hash":"903c358d8f46488110a6462bc710546a755c50ba","modified":1664159521011},{"_id":"themes/flex-block/layout/_partial/nav.ejs","hash":"e58516a49b3997d9f2fe2bcd6bcced97b3e6ecd6","modified":1664159521018},{"_id":"themes/flex-block/layout/plug-in/dplayer.ejs","hash":"b328a419bdfee2fa96d8b64805db854d069d35ea","modified":1664159521041},{"_id":"themes/flex-block/layout/_widget/article-nav.ejs","hash":"8df3b527e6153323c8ded33768bd5e5267dfa422","modified":1664159521028},{"_id":"themes/flex-block/layout/_partial/pagination.ejs","hash":"22d60f90cf93b7a80ab1dc044fbf5808a723872a","modified":1664159521018},{"_id":"themes/flex-block/layout/_partial/page.ejs","hash":"75cb1422782f264a1e3e3dc407ba26d2510595c3","modified":1664159521018},{"_id":"themes/flex-block/layout/_widget/category.ejs","hash":"488d6e93a6240d00d0c60c9f104f4304400415ba","modified":1664159521028},{"_id":"themes/flex-block/layout/_widget/date.ejs","hash":"5c275ec71f7ce628599683393ae71cf95196f71f","modified":1664159521028},{"_id":"themes/flex-block/layout/_widget/comment.ejs","hash":"1764ba8abe7ba34748e3603fc536a73404037964","modified":1664159521028},{"_id":"themes/flex-block/layout/_widget/tag.ejs","hash":"2a1642735fe62363cee1eeeb09a3d36c2e8ac00e","modified":1664159521028},{"_id":"themes/flex-block/layout/_widget/widget-author.ejs","hash":"d3bb8143f405d39734b28216f31a5a7b26691bab","modified":1664159521028},{"_id":"themes/flex-block/layout/_widget/widget-categorys.ejs","hash":"588237737f87a0ff69d00605c868c1297054d573","modified":1664159521028},{"_id":"themes/flex-block/layout/_widget/widget-notice.ejs","hash":"0a1ec45028b2abd123bb6a96017168fd55759971","modified":1664159521028},{"_id":"themes/flex-block/layout/_widget/widget-toc.ejs","hash":"0607e05641735d1fea7c74bc3c5b5f41f3bfb16f","modified":1664159521036},{"_id":"themes/flex-block/layout/_widget/widget-tags.ejs","hash":"8c360bf72e85a4cf48c6064b44a64828d059285a","modified":1664159521036},{"_id":"themes/flex-block/source/js/script.js","hash":"df8e22b2f98a9c9c4547f1bb0cc73f37180ff790","modified":1664159521084},{"_id":"themes/flex-block/source/css/style.styl","hash":"c56dc27939e0ca92b2e3f3e6119eeb654a198ec6","modified":1664159521073},{"_id":"themes/flex-block/source/css/_partial/card.styl","hash":"458daa8aec35a5352d82bcd42ea68ac13a875b75","modified":1664159521059},{"_id":"themes/flex-block/source/css/_partial/content.styl","hash":"6417486290b19661228f6cced736ccbc10fdd3e5","modified":1664159521067},{"_id":"themes/flex-block/source/css/_partial/footer.styl","hash":"11cf25e1999463aeec061c23ca7d32ee7dbc783d","modified":1664159521067},{"_id":"themes/flex-block/source/css/_partial/header.styl","hash":"c657c1bfbf984e14f1e593a89fab330d442971be","modified":1664159521067},{"_id":"themes/flex-block/source/css/_partial/nav.styl","hash":"891257e01cc805a5cfbf7298b44f24616a22d8fb","modified":1664159521067},{"_id":"themes/flex-block/source/css/_partial/pagination.styl","hash":"268bb486fc8682aa7e8e2417211c84cd1d5da264","modified":1664159521073},{"_id":"themes/flex-block/source/css/_util/mixins.styl","hash":"2189d5e686410ecc79c4e8e357dc0737965d295d","modified":1664159521073},{"_id":"themes/flex-block/source/css/_partial/page.styl","hash":"cfc59a5969a140997dbe7b5a97e816b5f54d4a03","modified":1664159521067},{"_id":"themes/flex-block/source/css/_util/variables.styl","hash":"1c086d4ad292550acfa1e291f4dfa355c97f506e","modified":1664159521073},{"_id":"themes/flex-block/source/css/_util/theme.styl","hash":"68fea7a3bf7d2e5cad165fb096efa74bcc8f3023","modified":1664159521073},{"_id":"themes/flex-block/source/icons-512.png","hash":"c2cd59a7712738831ee0cca4338343d407777a4b","modified":1664159521082},{"_id":"themes/flex-block/aponia.jpg","hash":"6d0ea0c7a2b3473c8935d8b1942974774057b57b","modified":1659437702848},{"_id":"public/categories/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1665674817686},{"_id":"public/archives/index.html","hash":"5f450bb53f1bf6ec22f6fd61faf0163275ae6e7e","modified":1668161951153},{"_id":"public/archives/2022/index.html","hash":"5f450bb53f1bf6ec22f6fd61faf0163275ae6e7e","modified":1668161951153},{"_id":"public/archives/2022/10/index.html","hash":"3f675c3ecba7d3a0d0230826f5d9497de38dee11","modified":1668161951153},{"_id":"public/index.html","hash":"17cf9b180217b1f5a59567e874fda797676171a4","modified":1668161951153},{"_id":"public/tags/博客配置/index.html","hash":"891c0caf9d5060ff9cf069fc43d19b0805a1d27e","modified":1668157658935},{"_id":"public/tags/学习/index.html","hash":"e7ab7350c7ba835bf9517092915956862729dcab","modified":1668157658935},{"_id":"public/about/index.html","hash":"0bd8051c4ab09618601f16139aca6e4dbf67678e","modified":1668161951153},{"_id":"public/links/index.html","hash":"07fd934ab17d575985fc3e8e19152964847e73ab","modified":1668161951153},{"_id":"public/message/index.html","hash":"6b086547ae681a670f5bdb46f8ac56f3045d4dac","modified":1668161951153},{"_id":"public/2022/10/13/数据库/index.html","hash":"aa98a49c34500a61e44337da56488b60afe2d821","modified":1665676135130},{"_id":"public/2022/10/11/front-matter配置/index.html","hash":"28fcd93ff32bb48abea594d044eaf1a06518f544","modified":1668161951153},{"_id":"public/2022/10/10/hive/index.html","hash":"89576cae6c4f7cff6836ca92eb8ab4b675f8845f","modified":1665988382889},{"_id":"public/2022/10/10/git常用命令/index.html","hash":"74b6fd19380d85f62defdde3628c4c0f5b9ac90f","modified":1668161951153},{"_id":"public/2022/10/10/青梅竹马，两小无猜/index.html","hash":"869e6259d72eaad4b666492a2676d007de79725e","modified":1668157658935},{"_id":"public/2022/10/09/灵活排位日记/index.html","hash":"b016d5dad8e7aeb3bdfef095a0122d7201dead56","modified":1666004534700},{"_id":"public/2022/10/04/波尔登森林公园一游/index.html","hash":"1ad459fa1441a278e7247dcd6d24d3a096294580","modified":1666004534700},{"_id":"public/tags/日常/index.html","hash":"c0c54586b7d2ac268c37834043fb3c324c546edd","modified":1668157658935},{"_id":"public/tags/有感而发/index.html","hash":"d98a020338b347c4255c547ab0838417740955c0","modified":1668157658935},{"_id":"public/icons-192.png","hash":"8cd106d9039f1d5aa8163ecd4a5e352058a0f6cf","modified":1665673536597},{"_id":"public/favicon.ico","hash":"cd1b610096d9c5c780fd2a7e24baaa78dada3163","modified":1665673536597},{"_id":"public/manifest.json","hash":"70ae21c5c320fbc0df5922a4baf3fa73d5343959","modified":1665673536597},{"_id":"public/js/script.js","hash":"8f0900b1b6bbd1fdc463fbc77f3deb5e598c9871","modified":1665673536597},{"_id":"public/css/style.css","hash":"d144f2d72758599aef854441410f1dcf63bc6639","modified":1665673536597},{"_id":"public/icons-512.png","hash":"c2cd59a7712738831ee0cca4338343d407777a4b","modified":1665673536597},{"_id":"public/categories/博客配置/index.html","hash":"c788f6e88f7bde1c7a223fa1ef3adc7cb3d2010a","modified":1668157658935},{"_id":"source/_posts/hadoop大数据.md","hash":"ac8e5d96527fbce069be0907faa50568e22e7727","modified":1666354366211},{"_id":"source/_posts/MySQL数据库.md","hash":"cb10672a92d004d9259ffc2490ffcd62d7182b3f","modified":1666685755713},{"_id":"source/_posts/Python爬虫.md","hash":"009be1b73caa84756297c98c498aa9cb5d25a6e4","modified":1668091854575},{"_id":"source/_posts/我的日常.md","hash":"ac6aecd568308d080df9de6c8061c45940673afd","modified":1668091854579},{"_id":"source/_posts/番剧推荐.md","hash":"6aa9257b69e3d681ccb172715547a0d97a6d09da","modified":1666789990930},{"_id":"public/2022/10/17/hadoop大数据/index.html","hash":"5b4c555b66cbb007a2ab560c57bc273f5c062f1d","modified":1668161951153},{"_id":"public/2022/10/17/Python爬虫/index.html","hash":"5c7e8c6855aeaa89974dec97020af4e163bcf7ac","modified":1668161951153},{"_id":"public/2022/10/15/番剧推荐/index.html","hash":"107affa1856bbf41862be1cdee8115d2122fdaa1","modified":1668157658935},{"_id":"public/2022/10/14/我的日常/index.html","hash":"16ba2d888cba84b2cc7571f6d114f5d60c665f27","modified":1668157658935},{"_id":"public/2022/10/13/MySQL数据库/index.html","hash":"27e4b94e56d55796a74e18196531cb7b546a8b70","modified":1668161951153},{"_id":"public/categories/学习/index.html","hash":"8c5067cd35bc7803796eefd97dedf658300cec21","modified":1668157658935},{"_id":"public/categories/日常/index.html","hash":"0397d6df0962473b9d975c4ca5542e523fa7984d","modified":1668157658935},{"_id":"public/categories/有感而发/index.html","hash":"57f26899eb73a32e1ba0cc54c88291518bb4d947","modified":1668157658935},{"_id":"public/categories/二次元/index.html","hash":"b8775cdce08141b4febcd0f9225e3d28df73fc42","modified":1668157658935},{"_id":"public/archives/page/2/index.html","hash":"7897e68204f5376ffd2bd151398b2885c9824a5c","modified":1668157658935},{"_id":"public/archives/2022/page/2/index.html","hash":"e11c666e3567373f8b315207ae517dbb4b75066f","modified":1668157658935},{"_id":"public/page/2/index.html","hash":"12fb48a818040e4253d424c594b4e15c76ab877a","modified":1668157658935},{"_id":"public/archives/2022/10/page/2/index.html","hash":"dc9e2068b870ed1af2f631b385c2fef9b3f34e91","modified":1668157658935},{"_id":"public/tags/二次元/index.html","hash":"f3bdd9d89fbddf90e467ccdcc25069882254eb03","modified":1668157658935},{"_id":"source/_posts/hive数据仓库.md","hash":"fe3b80e02bafac256b30c723a2abfb5ac1896d28","modified":1668091854573},{"_id":"public/2022/10/10/hive数据仓库/index.html","hash":"c3c0662c045556c914da1d9efefc10b32be957aa","modified":1668161951153},{"_id":"source/_posts/Hadoop安装.md","hash":"4c939c08300f52a9a808a5c8e0b3976f81b6f8ae","modified":1666357031884},{"_id":"source/_posts/Hive安装.md","hash":"d6731fa2d1f427ff0e9babe4c999770cd218b402","modified":1666357021777},{"_id":"source/_posts/Maven.md","hash":"aeee954b2700c239599f7753a07045d65fb47d18","modified":1666797785531},{"_id":"source/_posts/恭喜DRX夺冠.md","hash":"b780f5d2bff25ffb3928c5af322b9bc7882b0811","modified":1668091854577},{"_id":"source/_posts/Spark.md","hash":"5ba6fa71204cc0da276b071403ce558320f1492e","modified":1668091854577},{"_id":"public/archives/2022/11/index.html","hash":"704de542a2501f3ceec61026d1d13ab5782135a0","modified":1668161951153},{"_id":"public/2022/11/06/恭喜DRX夺冠/index.html","hash":"253ff9444bcafe2285c8d94d7cd42267678e2d5f","modified":1668157658935},{"_id":"public/2022/10/30/Spark/index.html","hash":"6ca9d5e6d1ba61dff28a696f04fe36da6aa1a77c","modified":1668161951153},{"_id":"public/2022/10/21/Hive安装/index.html","hash":"488c1e92dd3884f42d03e3088fc5a35c889e3240","modified":1668161951153},{"_id":"public/2022/10/21/Hadoop安装/index.html","hash":"23b6dba832a0075008502660bada70e4a5825590","modified":1668161951153},{"_id":"source/_posts/麒坑.md","hash":"80089768761d34f13299b7fc9902218020a37455","modified":1668161837958},{"_id":"public/2022/11/11/麒坑/index.html","hash":"f43e78e7b0b676d51daed19c79572d35b502e2a3","modified":1668161951153}],"Category":[{"name":"博客配置","_id":"cl978kbsz0000g4w1ct9kdv2a"},{"name":"学习","_id":"cl9cegjcq0002uow175dp73sw"},{"name":"日常","_id":"cl9cegjd9000euow1cqmrd4vs"},{"name":"有感而发","_id":"cl9cegjdf000luow1fv7abrw8"},{"name":"二次元","_id":"cl9cegjdg000ouow17hc75rlg"}],"Data":[{"_id":"links","data":[{"name":"yixin","link":"https://blog.yixinfangfa.top/","description":"","avatar":""},{"name":"GiriNeko的猫窝","link":" https://ineko.cc/","description":"一头会说话的咸鱼","avatar":"https://static.ineko.cc/images/favicon.png"}]}],"Page":[{"title":"关于","date":"2022-10-06T04:15:16.000Z","layout":"about","subtitle":"想知道关于我的什么","cover":"https://qiansen.oss-cn-hangzhou.aliyuncs.com/灵魂莲华刀妹.jpg","_content":"\n![加藤惠](https://qiansen.oss-cn-hangzhou.aliyuncs.com/关于.png)\n\n# おれは\n\n---\n\n- 一名大数据专业的本科在校生\n- 一位常年混迹在白银黄金的LOL玩家\n- 一名二次元宅男，梦想加入米哈游\n- 天天看番，社恐男生\n\n# 联系方式\n\n---\n\n- 邮箱 ：3247054062@qq.com\n- Github : [我在这里]()\n\n# 关于本站\n\n- 本站使用[hexo](https://hexo.io/zh-cn/)搭建\n\n- 主题使用的是[flex-block](https://github.com/miiiku/flex-block)\n\n- 非常感谢二位作者的辛勤付出","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2022-10-06 12:15:16\nlayout : about\nsubtitle: 想知道关于我的什么\ncover: https://qiansen.oss-cn-hangzhou.aliyuncs.com/灵魂莲华刀妹.jpg\n---\n\n![加藤惠](https://qiansen.oss-cn-hangzhou.aliyuncs.com/关于.png)\n\n# おれは\n\n---\n\n- 一名大数据专业的本科在校生\n- 一位常年混迹在白银黄金的LOL玩家\n- 一名二次元宅男，梦想加入米哈游\n- 天天看番，社恐男生\n\n# 联系方式\n\n---\n\n- 邮箱 ：3247054062@qq.com\n- Github : [我在这里]()\n\n# 关于本站\n\n- 本站使用[hexo](https://hexo.io/zh-cn/)搭建\n\n- 主题使用的是[flex-block](https://github.com/miiiku/flex-block)\n\n- 非常感谢二位作者的辛勤付出","updated":"2022-10-20T01:28:10.194Z","path":"about/index.html","_id":"cl9770mtl00001sw1bqjd3au6","comments":1,"content":"<p><img src=\"https://qiansen.oss-cn-hangzhou.aliyuncs.com/%E5%85%B3%E4%BA%8E.png\" alt=\"加藤惠\"></p>\n<h1 id=\"おれは\"><a href=\"#おれは\" class=\"headerlink\" title=\"おれは\"></a>おれは</h1><hr>\n<ul>\n<li>一名大数据专业的本科在校生</li>\n<li>一位常年混迹在白银黄金的LOL玩家</li>\n<li>一名二次元宅男，梦想加入米哈游</li>\n<li>天天看番，社恐男生</li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><hr>\n<ul>\n<li>邮箱 ：<a href=\"mailto:&#x33;&#x32;&#x34;&#55;&#x30;&#53;&#x34;&#48;&#54;&#50;&#x40;&#113;&#113;&#x2e;&#x63;&#111;&#x6d;\">&#x33;&#x32;&#x34;&#55;&#x30;&#53;&#x34;&#48;&#54;&#50;&#x40;&#113;&#113;&#x2e;&#x63;&#111;&#x6d;</a></li>\n<li>Github : <a href=\"\">我在这里</a></li>\n</ul>\n<h1 id=\"关于本站\"><a href=\"#关于本站\" class=\"headerlink\" title=\"关于本站\"></a>关于本站</h1><ul>\n<li><p>本站使用<a href=\"https://hexo.io/zh-cn/\">hexo</a>搭建</p>\n</li>\n<li><p>主题使用的是<a href=\"https://github.com/miiiku/flex-block\">flex-block</a></p>\n</li>\n<li><p>非常感谢二位作者的辛勤付出</p>\n</li>\n</ul>\n","site":{"data":{"links":[{"name":"yixin","link":"https://blog.yixinfangfa.top/","description":"","avatar":""},{"name":"GiriNeko的猫窝","link":" https://ineko.cc/","description":"一头会说话的咸鱼","avatar":"https://static.ineko.cc/images/favicon.png"}]}},"excerpt":"","more":"<p><img src=\"https://qiansen.oss-cn-hangzhou.aliyuncs.com/%E5%85%B3%E4%BA%8E.png\" alt=\"加藤惠\"></p>\n<h1 id=\"おれは\"><a href=\"#おれは\" class=\"headerlink\" title=\"おれは\"></a>おれは</h1><hr>\n<ul>\n<li>一名大数据专业的本科在校生</li>\n<li>一位常年混迹在白银黄金的LOL玩家</li>\n<li>一名二次元宅男，梦想加入米哈游</li>\n<li>天天看番，社恐男生</li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><hr>\n<ul>\n<li>邮箱 ：<a href=\"mailto:&#x33;&#x32;&#x34;&#55;&#x30;&#53;&#x34;&#48;&#54;&#50;&#x40;&#113;&#113;&#x2e;&#x63;&#111;&#x6d;\">&#x33;&#x32;&#x34;&#55;&#x30;&#53;&#x34;&#48;&#54;&#50;&#x40;&#113;&#113;&#x2e;&#x63;&#111;&#x6d;</a></li>\n<li>Github : <a href=\"\">我在这里</a></li>\n</ul>\n<h1 id=\"关于本站\"><a href=\"#关于本站\" class=\"headerlink\" title=\"关于本站\"></a>关于本站</h1><ul>\n<li><p>本站使用<a href=\"https://hexo.io/zh-cn/\">hexo</a>搭建</p>\n</li>\n<li><p>主题使用的是<a href=\"https://github.com/miiiku/flex-block\">flex-block</a></p>\n</li>\n<li><p>非常感谢二位作者的辛勤付出</p>\n</li>\n</ul>\n"},{"title":"小伙伴","date":"2022-10-04T08:18:18.000Z","subtitle":"おはよう~","layout":"links","_content":"\n\n\n这里是好友们的友链交换区\n\n------\n\n如果要申请友链，请在评论区留言或者在通过其它方式联系我，我会第一时间处理。\n\n本人的友链信息如下：\n\n站点名称 | 纯爱天下第一！\n\n站点地址 | https://aponia.top\n\n站点描述 | 社恐宅男的极乐净土\n\n站点图标 | https://qiansen.oss-cn-hangzhou.aliyuncs.com/1 (1).png","source":"links/index.md","raw":"---\ntitle: 小伙伴\ndate: 2022-10-04 16:18:18\nsubtitle: おはよう~\nlayout: links\n---\n\n\n\n这里是好友们的友链交换区\n\n------\n\n如果要申请友链，请在评论区留言或者在通过其它方式联系我，我会第一时间处理。\n\n本人的友链信息如下：\n\n站点名称 | 纯爱天下第一！\n\n站点地址 | https://aponia.top\n\n站点描述 | 社恐宅男的极乐净土\n\n站点图标 | https://qiansen.oss-cn-hangzhou.aliyuncs.com/1 (1).png","updated":"2022-10-11T13:58:26.129Z","path":"links/index.html","comments":1,"_id":"cl9770mtu00051sw1ev37a67a","content":"<p>这里是好友们的友链交换区</p>\n<hr>\n<p>如果要申请友链，请在评论区留言或者在通过其它方式联系我，我会第一时间处理。</p>\n<p>本人的友链信息如下：</p>\n<p>站点名称 | 纯爱天下第一！</p>\n<p>站点地址 | <a href=\"https://aponia.top/\">https://aponia.top</a></p>\n<p>站点描述 | 社恐宅男的极乐净土</p>\n<p>站点图标 | <a href=\"https://qiansen.oss-cn-hangzhou.aliyuncs.com/1\">https://qiansen.oss-cn-hangzhou.aliyuncs.com/1</a> (1).png</p>\n","site":{"data":{"links":[{"name":"yixin","link":"https://blog.yixinfangfa.top/","description":"","avatar":""}]}},"excerpt":"","more":"<p>这里是好友们的友链交换区</p>\n<hr>\n<p>如果要申请友链，请在评论区留言或者在通过其它方式联系我，我会第一时间处理。</p>\n<p>本人的友链信息如下：</p>\n<p>站点名称 | 纯爱天下第一！</p>\n<p>站点地址 | <a href=\"https://aponia.top/\">https://aponia.top</a></p>\n<p>站点描述 | 社恐宅男的极乐净土</p>\n<p>站点图标 | <a href=\"https://qiansen.oss-cn-hangzhou.aliyuncs.com/1\">https://qiansen.oss-cn-hangzhou.aliyuncs.com/1</a> (1).png</p>\n"},{"title":"留言区","date":"2022-10-04T07:59:50.000Z","subtitle":"嘤嘤嘤嘤嘤","comments":1,"layout":"messages","_content":"\n对网站或者我个人有什么疑问的请在此留言。\n\n------\n\n本站评论系统采用valine，是一种半匿名的评论系统，如果嫌麻烦，可以直接匿名留言\n\n如果是不希望遗漏的留言，请通过「关于」的联系方式联系我\n\n当然，欢迎来交朋友和交换友链。","source":"message/index.md","raw":"---\ntitle: 留言区\ndate: 2022-10-04 15:59:50\nsubtitle: 嘤嘤嘤嘤嘤\ncomments: true\nlayout: messages\n---\n\n对网站或者我个人有什么疑问的请在此留言。\n\n------\n\n本站评论系统采用valine，是一种半匿名的评论系统，如果嫌麻烦，可以直接匿名留言\n\n如果是不希望遗漏的留言，请通过「关于」的联系方式联系我\n\n当然，欢迎来交朋友和交换友链。","updated":"2022-10-11T13:54:29.194Z","path":"message/index.html","_id":"cl9770mtv00071sw12az4a388","content":"<p>对网站或者我个人有什么疑问的请在此留言。</p>\n<hr>\n<p>本站评论系统采用valine，是一种半匿名的评论系统，如果嫌麻烦，可以直接匿名留言</p>\n<p>如果是不希望遗漏的留言，请通过「关于」的联系方式联系我</p>\n<p>当然，欢迎来交朋友和交换友链。</p>\n","site":{"data":{"links":[{"name":"yixin","link":"https://blog.yixinfangfa.top/","description":"","avatar":""}]}},"excerpt":"","more":"<p>对网站或者我个人有什么疑问的请在此留言。</p>\n<hr>\n<p>本站评论系统采用valine，是一种半匿名的评论系统，如果嫌麻烦，可以直接匿名留言</p>\n<p>如果是不希望遗漏的留言，请通过「关于」的联系方式联系我</p>\n<p>当然，欢迎来交朋友和交换友链。</p>\n"}],"Post":[{"title":"front-matter配置","date":"2022-10-11T07:46:11.000Z","cover":"https://qiansen.oss-cn-hangzhou.aliyuncs.com/front-matter配置.png","_content":"\n`Front-matter`相关的配置内容可以查看官方文档:[front-matter](https://hexo.io/zh-cn/docs/front-matter)\n\n里面有相关属性的说明，在`flex-block`中，主要添加如下属性:\n\n| Key      | Type    | Description                                        |\n| :------- | :------ | :------------------------------------------------- |\n| cover    | string  | 封面图片                                           |\n| layout   | stirng  | 页面类型(`只有在page页面下生效`)                   |\n| subtitle | string  | 小标题/描述(`只有在page页面生效`)                  |\n| toc      | boolean | 是否开启TOC功能(`只有在post页面下生效`)            |\n| aplayer  | boolean | 是否启用aplayer播放器(`只有在post,page页面下生效`) |\n| dplayer  | boolean | 是否启用dplayer播放器(`只有在post,page页面下生效`) |\n\n其中`layout`细说一下，目前layout支持的字段有`messages`和`links`，分别是留言板跟友联页面，如创建一个留言页面:\n\n```\nhexo new page message\n```\n\n会在`source`目录下生成`message/index.md`，\b编辑index.md，在front-matter中添加`layout: messages`，这样就添加了一个留言页面。","source":"_posts/front-matter配置.md","raw":"---\ntitle: front-matter配置\ndate: 2022-10-11 15:46:11\ntags: 博客配置\ncategory: 博客配置\ncover: https://qiansen.oss-cn-hangzhou.aliyuncs.com/front-matter配置.png\n---\n\n`Front-matter`相关的配置内容可以查看官方文档:[front-matter](https://hexo.io/zh-cn/docs/front-matter)\n\n里面有相关属性的说明，在`flex-block`中，主要添加如下属性:\n\n| Key      | Type    | Description                                        |\n| :------- | :------ | :------------------------------------------------- |\n| cover    | string  | 封面图片                                           |\n| layout   | stirng  | 页面类型(`只有在page页面下生效`)                   |\n| subtitle | string  | 小标题/描述(`只有在page页面生效`)                  |\n| toc      | boolean | 是否开启TOC功能(`只有在post页面下生效`)            |\n| aplayer  | boolean | 是否启用aplayer播放器(`只有在post,page页面下生效`) |\n| dplayer  | boolean | 是否启用dplayer播放器(`只有在post,page页面下生效`) |\n\n其中`layout`细说一下，目前layout支持的字段有`messages`和`links`，分别是留言板跟友联页面，如创建一个留言页面:\n\n```\nhexo new page message\n```\n\n会在`source`目录下生成`message/index.md`，\b编辑index.md，在front-matter中添加`layout: messages`，这样就添加了一个留言页面。","slug":"front-matter配置","published":1,"updated":"2022-10-17T10:50:36.436Z","_id":"cl9770mto00011sw155mu5e03","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>Front-matter</code>相关的配置内容可以查看官方文档:<a href=\"https://hexo.io/zh-cn/docs/front-matter\">front-matter</a></p>\n<p>里面有相关属性的说明，在<code>flex-block</code>中，主要添加如下属性:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Key</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">cover</td>\n<td align=\"left\">string</td>\n<td align=\"left\">封面图片</td>\n</tr>\n<tr>\n<td align=\"left\">layout</td>\n<td align=\"left\">stirng</td>\n<td align=\"left\">页面类型(<code>只有在page页面下生效</code>)</td>\n</tr>\n<tr>\n<td align=\"left\">subtitle</td>\n<td align=\"left\">string</td>\n<td align=\"left\">小标题&#x2F;描述(<code>只有在page页面生效</code>)</td>\n</tr>\n<tr>\n<td align=\"left\">toc</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\">是否开启TOC功能(<code>只有在post页面下生效</code>)</td>\n</tr>\n<tr>\n<td align=\"left\">aplayer</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\">是否启用aplayer播放器(<code>只有在post,page页面下生效</code>)</td>\n</tr>\n<tr>\n<td align=\"left\">dplayer</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\">是否启用dplayer播放器(<code>只有在post,page页面下生效</code>)</td>\n</tr>\n</tbody></table>\n<p>其中<code>layout</code>细说一下，目前layout支持的字段有<code>messages</code>和<code>links</code>，分别是留言板跟友联页面，如创建一个留言页面:</p>\n<pre><code>hexo new page message\n</code></pre>\n<p>会在<code>source</code>目录下生成<code>message/index.md</code>，\b编辑index.md，在front-matter中添加<code>layout: messages</code>，这样就添加了一个留言页面。</p>\n","site":{"data":{"links":[{"name":"yixin","link":"https://blog.yixinfangfa.top/","description":"","avatar":""},{"name":"GiriNeko的猫窝","link":" https://ineko.cc/","description":"一头会说话的咸鱼","avatar":"https://static.ineko.cc/images/favicon.png"}]}},"excerpt":"","more":"<p><code>Front-matter</code>相关的配置内容可以查看官方文档:<a href=\"https://hexo.io/zh-cn/docs/front-matter\">front-matter</a></p>\n<p>里面有相关属性的说明，在<code>flex-block</code>中，主要添加如下属性:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Key</th>\n<th align=\"left\">Type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">cover</td>\n<td align=\"left\">string</td>\n<td align=\"left\">封面图片</td>\n</tr>\n<tr>\n<td align=\"left\">layout</td>\n<td align=\"left\">stirng</td>\n<td align=\"left\">页面类型(<code>只有在page页面下生效</code>)</td>\n</tr>\n<tr>\n<td align=\"left\">subtitle</td>\n<td align=\"left\">string</td>\n<td align=\"left\">小标题&#x2F;描述(<code>只有在page页面生效</code>)</td>\n</tr>\n<tr>\n<td align=\"left\">toc</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\">是否开启TOC功能(<code>只有在post页面下生效</code>)</td>\n</tr>\n<tr>\n<td align=\"left\">aplayer</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\">是否启用aplayer播放器(<code>只有在post,page页面下生效</code>)</td>\n</tr>\n<tr>\n<td align=\"left\">dplayer</td>\n<td align=\"left\">boolean</td>\n<td align=\"left\">是否启用dplayer播放器(<code>只有在post,page页面下生效</code>)</td>\n</tr>\n</tbody></table>\n<p>其中<code>layout</code>细说一下，目前layout支持的字段有<code>messages</code>和<code>links</code>，分别是留言板跟友联页面，如创建一个留言页面:</p>\n<pre><code>hexo new page message\n</code></pre>\n<p>会在<code>source</code>目录下生成<code>message/index.md</code>，\b编辑index.md，在front-matter中添加<code>layout: messages</code>，这样就添加了一个留言页面。</p>\n"},{"title":"git常用命令","date":"2022-10-10T14:02:05.000Z","cover":"https://qiansen.oss-cn-hangzhou.aliyuncs.com/git常用命令.jpg","_content":"\n### git add\n\n- 把指定的文件添加到暂存区中\n\n  git\tadd\t<文件路径>\n\n- 添加所有修改、已删除的文件到暂存区中\n\n  git\tadd\t-u\t<文件路径>\n\n  git\tadd\t--update\t<文件路径>\n\n- 添加所有修改、已删除、新增的文件到暂存区中，省略 <文件路径> 即为当前目录\n\n  git\tadd\t-A\t<文件路径>\n\n  git\tadd\t--all\t<文件路径>\n\n- 查看所有修改、已删除但没有提交的文件，进入一个子命令系统\n\n  git\tadd\t-i\t<文件路径>\n\n  git\tadd\t--interactive\t<文件路径>\n\n### git branch\n\n操作 Git 的分支命令。\n\n- 列出本地的所有分支，当前所在分支以 \"*\" 标出\n\n  git\tbranch\n\n- 列出本地的所有分支并显示最后一次提交，当前所在分支以 \"*\" 标出\n\n  git\tbranch\t-v\n\n- 创建新分支，新的分支基于上一次提交建立\n\n  git\tbranch\t<分支名>\n\n- 修改分支名称(如果不指定原分支名称则为当前所在分支)\n\n  git\tbranch\t-m\t<原分支名称>\t<新的分支名称>\n\n- 强制修改分支名称\n\n  git\tbranch\t-M\t<原分支名称>\t<新的分支名称>\n\n- 删除指定的本地分支\n\n  git\tbranch\t-d\t<分支名称>\n\n- 强制删除指定的本地分支\n\n  git\tbranch\t-D\t<分支名称>\n\n### git checkout\n\n更新工作树中的文件以匹配索引或指定树中的版本。如果没有给出路径 - `git checkout` 还会更新 `HEAD` ，将指定的分支设置为当前分支。\n\n- 切换到已存在的指定分支\n\n  git\tcheckout\t<分支名称>\n\n- 创建并切换到指定的分支，保留所有的提交记录(等同于 \"git branch\" 和 \"git checkout\" 两个命令合并)\n\n  git\tcheckout\t-b\t<分支名称>\n\n- 创建并切换到指定的分支，删除所有的提交记录\n\n  git\tcheckout\t--orphan\t<分支名称>\n\n### git commit\n\n将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。\n\n- 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息\n\n  ​\tgit\tcommit\n\n- 把暂存区中的文件提交到本地仓库中并添加描述信息\n\n  ​\tgit\tcommit\t-m\t'<提交的描述信息>'\n\n- 修改上次提交的描述信息\n\n  ​\tgit\tcommit\t--amend\n\n### git log\n\n显示提交的记录。\n\n- 打印所有的提交记录\n\n  git\tlog\n\n- 打印从第一次提交到指定的提交的记录\n\n  git\tlog\t<commit ID>\n\n- 打印指定数量的最新提交的记录\n\n  git\tlog\t-<指定的数量>\n\n### git pull\n\n从远程仓库获取最新版本并合并到本地。 首先会执行 `git fetch`，然后执行 `git merge`，把获取的分支的 HEAD 合并到当前分支。\n\n### git push\n\n把本地仓库的提交推送到远程仓库。\n\n- 把本地仓库的分支推送到远程仓库的指定分支\n\n  git\tpush\t<远程仓库的别名>\t<本地分支名> ：<远程分支名>\n\n### git remote\n\n操作远程库。\n\n- 列出已经存在的远程仓库\n\n  git\tremote\n\n- 列出远程仓库的详细信息，在别名后面列出URL地址\n\n  git\tremote\t-v\n\n  git\tremote\t--verbose\n\n- 添加远程仓库\n\n  git\tremote\tadd\t<远程仓库的别名>\t<远程仓库的URL地址>\n\n- 修改远程仓库的别名\n\n  git\tremote\trename \t<原远程仓库的别名> \t<新的别名>\n\n- 删除指定名称的远程仓库\n\n  git\tremote\tremove\t<远程仓库的别名>\n\n- 修改远程仓库的 URL 地址\n\n  git\tremote\tset-url\t<远程仓库的别名>\t<新的远程仓库URL地址>\n\n  ","source":"_posts/git常用命令.md","raw":"---\ntitle: git常用命令\ndate: 2022-10-10 22:02:05\ntags: 学习\ncategory: 学习\ncover: https://qiansen.oss-cn-hangzhou.aliyuncs.com/git常用命令.jpg\n---\n\n### git add\n\n- 把指定的文件添加到暂存区中\n\n  git\tadd\t<文件路径>\n\n- 添加所有修改、已删除的文件到暂存区中\n\n  git\tadd\t-u\t<文件路径>\n\n  git\tadd\t--update\t<文件路径>\n\n- 添加所有修改、已删除、新增的文件到暂存区中，省略 <文件路径> 即为当前目录\n\n  git\tadd\t-A\t<文件路径>\n\n  git\tadd\t--all\t<文件路径>\n\n- 查看所有修改、已删除但没有提交的文件，进入一个子命令系统\n\n  git\tadd\t-i\t<文件路径>\n\n  git\tadd\t--interactive\t<文件路径>\n\n### git branch\n\n操作 Git 的分支命令。\n\n- 列出本地的所有分支，当前所在分支以 \"*\" 标出\n\n  git\tbranch\n\n- 列出本地的所有分支并显示最后一次提交，当前所在分支以 \"*\" 标出\n\n  git\tbranch\t-v\n\n- 创建新分支，新的分支基于上一次提交建立\n\n  git\tbranch\t<分支名>\n\n- 修改分支名称(如果不指定原分支名称则为当前所在分支)\n\n  git\tbranch\t-m\t<原分支名称>\t<新的分支名称>\n\n- 强制修改分支名称\n\n  git\tbranch\t-M\t<原分支名称>\t<新的分支名称>\n\n- 删除指定的本地分支\n\n  git\tbranch\t-d\t<分支名称>\n\n- 强制删除指定的本地分支\n\n  git\tbranch\t-D\t<分支名称>\n\n### git checkout\n\n更新工作树中的文件以匹配索引或指定树中的版本。如果没有给出路径 - `git checkout` 还会更新 `HEAD` ，将指定的分支设置为当前分支。\n\n- 切换到已存在的指定分支\n\n  git\tcheckout\t<分支名称>\n\n- 创建并切换到指定的分支，保留所有的提交记录(等同于 \"git branch\" 和 \"git checkout\" 两个命令合并)\n\n  git\tcheckout\t-b\t<分支名称>\n\n- 创建并切换到指定的分支，删除所有的提交记录\n\n  git\tcheckout\t--orphan\t<分支名称>\n\n### git commit\n\n将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。\n\n- 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息\n\n  ​\tgit\tcommit\n\n- 把暂存区中的文件提交到本地仓库中并添加描述信息\n\n  ​\tgit\tcommit\t-m\t'<提交的描述信息>'\n\n- 修改上次提交的描述信息\n\n  ​\tgit\tcommit\t--amend\n\n### git log\n\n显示提交的记录。\n\n- 打印所有的提交记录\n\n  git\tlog\n\n- 打印从第一次提交到指定的提交的记录\n\n  git\tlog\t<commit ID>\n\n- 打印指定数量的最新提交的记录\n\n  git\tlog\t-<指定的数量>\n\n### git pull\n\n从远程仓库获取最新版本并合并到本地。 首先会执行 `git fetch`，然后执行 `git merge`，把获取的分支的 HEAD 合并到当前分支。\n\n### git push\n\n把本地仓库的提交推送到远程仓库。\n\n- 把本地仓库的分支推送到远程仓库的指定分支\n\n  git\tpush\t<远程仓库的别名>\t<本地分支名> ：<远程分支名>\n\n### git remote\n\n操作远程库。\n\n- 列出已经存在的远程仓库\n\n  git\tremote\n\n- 列出远程仓库的详细信息，在别名后面列出URL地址\n\n  git\tremote\t-v\n\n  git\tremote\t--verbose\n\n- 添加远程仓库\n\n  git\tremote\tadd\t<远程仓库的别名>\t<远程仓库的URL地址>\n\n- 修改远程仓库的别名\n\n  git\tremote\trename \t<原远程仓库的别名> \t<新的别名>\n\n- 删除指定名称的远程仓库\n\n  git\tremote\tremove\t<远程仓库的别名>\n\n- 修改远程仓库的 URL 地址\n\n  git\tremote\tset-url\t<远程仓库的别名>\t<新的远程仓库URL地址>\n\n  ","slug":"git常用命令","published":1,"updated":"2022-10-20T01:20:53.784Z","_id":"cl9770mts00031sw1cw298rlt","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h3><ul>\n<li><p>把指定的文件添加到暂存区中</p>\n<p>git\tadd\t&lt;文件路径&gt;</p>\n</li>\n<li><p>添加所有修改、已删除的文件到暂存区中</p>\n<p>git\tadd\t-u\t&lt;文件路径&gt;</p>\n<p>git\tadd\t–update\t&lt;文件路径&gt;</p>\n</li>\n<li><p>添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录</p>\n<p>git\tadd\t-A\t&lt;文件路径&gt;</p>\n<p>git\tadd\t–all\t&lt;文件路径&gt;</p>\n</li>\n<li><p>查看所有修改、已删除但没有提交的文件，进入一个子命令系统</p>\n<p>git\tadd\t-i\t&lt;文件路径&gt;</p>\n<p>git\tadd\t–interactive\t&lt;文件路径&gt;</p>\n</li>\n</ul>\n<h3 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a>git branch</h3><p>操作 Git 的分支命令。</p>\n<ul>\n<li><p>列出本地的所有分支，当前所在分支以 “*” 标出</p>\n<p>git\tbranch</p>\n</li>\n<li><p>列出本地的所有分支并显示最后一次提交，当前所在分支以 “*” 标出</p>\n<p>git\tbranch\t-v</p>\n</li>\n<li><p>创建新分支，新的分支基于上一次提交建立</p>\n<p>git\tbranch\t&lt;分支名&gt;</p>\n</li>\n<li><p>修改分支名称(如果不指定原分支名称则为当前所在分支)</p>\n<p>git\tbranch\t-m\t&lt;原分支名称&gt;\t&lt;新的分支名称&gt;</p>\n</li>\n<li><p>强制修改分支名称</p>\n<p>git\tbranch\t-M\t&lt;原分支名称&gt;\t&lt;新的分支名称&gt;</p>\n</li>\n<li><p>删除指定的本地分支</p>\n<p>git\tbranch\t-d\t&lt;分支名称&gt;</p>\n</li>\n<li><p>强制删除指定的本地分支</p>\n<p>git\tbranch\t-D\t&lt;分支名称&gt;</p>\n</li>\n</ul>\n<h3 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h3><p>更新工作树中的文件以匹配索引或指定树中的版本。如果没有给出路径 - <code>git checkout</code> 还会更新 <code>HEAD</code> ，将指定的分支设置为当前分支。</p>\n<ul>\n<li><p>切换到已存在的指定分支</p>\n<p>git\tcheckout\t&lt;分支名称&gt;</p>\n</li>\n<li><p>创建并切换到指定的分支，保留所有的提交记录(等同于 “git branch” 和 “git checkout” 两个命令合并)</p>\n<p>git\tcheckout\t-b\t&lt;分支名称&gt;</p>\n</li>\n<li><p>创建并切换到指定的分支，删除所有的提交记录</p>\n<p>git\tcheckout\t–orphan\t&lt;分支名称&gt;</p>\n</li>\n</ul>\n<h3 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h3><p>将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。</p>\n<ul>\n<li><p>把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息</p>\n<p>​\tgit\tcommit</p>\n</li>\n<li><p>把暂存区中的文件提交到本地仓库中并添加描述信息</p>\n<p>​\tgit\tcommit\t-m\t‘&lt;提交的描述信息&gt;’</p>\n</li>\n<li><p>修改上次提交的描述信息</p>\n<p>​\tgit\tcommit\t–amend</p>\n</li>\n</ul>\n<h3 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h3><p>显示提交的记录。</p>\n<ul>\n<li><p>打印所有的提交记录</p>\n<p>git\tlog</p>\n</li>\n<li><p>打印从第一次提交到指定的提交的记录</p>\n<p>git\tlog\t<commit ID></p>\n</li>\n<li><p>打印指定数量的最新提交的记录</p>\n<p>git\tlog\t-&lt;指定的数量&gt;</p>\n</li>\n</ul>\n<h3 id=\"git-pull\"><a href=\"#git-pull\" class=\"headerlink\" title=\"git pull\"></a>git pull</h3><p>从远程仓库获取最新版本并合并到本地。 首先会执行 <code>git fetch</code>，然后执行 <code>git merge</code>，把获取的分支的 HEAD 合并到当前分支。</p>\n<h3 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h3><p>把本地仓库的提交推送到远程仓库。</p>\n<ul>\n<li><p>把本地仓库的分支推送到远程仓库的指定分支</p>\n<p>git\tpush\t&lt;远程仓库的别名&gt;\t&lt;本地分支名&gt; ：&lt;远程分支名&gt;</p>\n</li>\n</ul>\n<h3 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a>git remote</h3><p>操作远程库。</p>\n<ul>\n<li><p>列出已经存在的远程仓库</p>\n<p>git\tremote</p>\n</li>\n<li><p>列出远程仓库的详细信息，在别名后面列出URL地址</p>\n<p>git\tremote\t-v</p>\n<p>git\tremote\t–verbose</p>\n</li>\n<li><p>添加远程仓库</p>\n<p>git\tremote\tadd\t&lt;远程仓库的别名&gt;\t&lt;远程仓库的URL地址&gt;</p>\n</li>\n<li><p>修改远程仓库的别名</p>\n<p>git\tremote\trename \t&lt;原远程仓库的别名&gt; \t&lt;新的别名&gt;</p>\n</li>\n<li><p>删除指定名称的远程仓库</p>\n<p>git\tremote\tremove\t&lt;远程仓库的别名&gt;</p>\n</li>\n<li><p>修改远程仓库的 URL 地址</p>\n<p>git\tremote\tset-url\t&lt;远程仓库的别名&gt;\t&lt;新的远程仓库URL地址&gt;</p>\n</li>\n</ul>\n","site":{"data":{"links":[{"name":"yixin","link":"https://blog.yixinfangfa.top/","description":"","avatar":""},{"name":"GiriNeko的猫窝","link":" https://ineko.cc/","description":"一头会说话的咸鱼","avatar":"https://static.ineko.cc/images/favicon.png"}]}},"excerpt":"","more":"<h3 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h3><ul>\n<li><p>把指定的文件添加到暂存区中</p>\n<p>git\tadd\t&lt;文件路径&gt;</p>\n</li>\n<li><p>添加所有修改、已删除的文件到暂存区中</p>\n<p>git\tadd\t-u\t&lt;文件路径&gt;</p>\n<p>git\tadd\t–update\t&lt;文件路径&gt;</p>\n</li>\n<li><p>添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录</p>\n<p>git\tadd\t-A\t&lt;文件路径&gt;</p>\n<p>git\tadd\t–all\t&lt;文件路径&gt;</p>\n</li>\n<li><p>查看所有修改、已删除但没有提交的文件，进入一个子命令系统</p>\n<p>git\tadd\t-i\t&lt;文件路径&gt;</p>\n<p>git\tadd\t–interactive\t&lt;文件路径&gt;</p>\n</li>\n</ul>\n<h3 id=\"git-branch\"><a href=\"#git-branch\" class=\"headerlink\" title=\"git branch\"></a>git branch</h3><p>操作 Git 的分支命令。</p>\n<ul>\n<li><p>列出本地的所有分支，当前所在分支以 “*” 标出</p>\n<p>git\tbranch</p>\n</li>\n<li><p>列出本地的所有分支并显示最后一次提交，当前所在分支以 “*” 标出</p>\n<p>git\tbranch\t-v</p>\n</li>\n<li><p>创建新分支，新的分支基于上一次提交建立</p>\n<p>git\tbranch\t&lt;分支名&gt;</p>\n</li>\n<li><p>修改分支名称(如果不指定原分支名称则为当前所在分支)</p>\n<p>git\tbranch\t-m\t&lt;原分支名称&gt;\t&lt;新的分支名称&gt;</p>\n</li>\n<li><p>强制修改分支名称</p>\n<p>git\tbranch\t-M\t&lt;原分支名称&gt;\t&lt;新的分支名称&gt;</p>\n</li>\n<li><p>删除指定的本地分支</p>\n<p>git\tbranch\t-d\t&lt;分支名称&gt;</p>\n</li>\n<li><p>强制删除指定的本地分支</p>\n<p>git\tbranch\t-D\t&lt;分支名称&gt;</p>\n</li>\n</ul>\n<h3 id=\"git-checkout\"><a href=\"#git-checkout\" class=\"headerlink\" title=\"git checkout\"></a>git checkout</h3><p>更新工作树中的文件以匹配索引或指定树中的版本。如果没有给出路径 - <code>git checkout</code> 还会更新 <code>HEAD</code> ，将指定的分支设置为当前分支。</p>\n<ul>\n<li><p>切换到已存在的指定分支</p>\n<p>git\tcheckout\t&lt;分支名称&gt;</p>\n</li>\n<li><p>创建并切换到指定的分支，保留所有的提交记录(等同于 “git branch” 和 “git checkout” 两个命令合并)</p>\n<p>git\tcheckout\t-b\t&lt;分支名称&gt;</p>\n</li>\n<li><p>创建并切换到指定的分支，删除所有的提交记录</p>\n<p>git\tcheckout\t–orphan\t&lt;分支名称&gt;</p>\n</li>\n</ul>\n<h3 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h3><p>将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。</p>\n<ul>\n<li><p>把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息</p>\n<p>​\tgit\tcommit</p>\n</li>\n<li><p>把暂存区中的文件提交到本地仓库中并添加描述信息</p>\n<p>​\tgit\tcommit\t-m\t‘&lt;提交的描述信息&gt;’</p>\n</li>\n<li><p>修改上次提交的描述信息</p>\n<p>​\tgit\tcommit\t–amend</p>\n</li>\n</ul>\n<h3 id=\"git-log\"><a href=\"#git-log\" class=\"headerlink\" title=\"git log\"></a>git log</h3><p>显示提交的记录。</p>\n<ul>\n<li><p>打印所有的提交记录</p>\n<p>git\tlog</p>\n</li>\n<li><p>打印从第一次提交到指定的提交的记录</p>\n<p>git\tlog\t<commit ID></p>\n</li>\n<li><p>打印指定数量的最新提交的记录</p>\n<p>git\tlog\t-&lt;指定的数量&gt;</p>\n</li>\n</ul>\n<h3 id=\"git-pull\"><a href=\"#git-pull\" class=\"headerlink\" title=\"git pull\"></a>git pull</h3><p>从远程仓库获取最新版本并合并到本地。 首先会执行 <code>git fetch</code>，然后执行 <code>git merge</code>，把获取的分支的 HEAD 合并到当前分支。</p>\n<h3 id=\"git-push\"><a href=\"#git-push\" class=\"headerlink\" title=\"git push\"></a>git push</h3><p>把本地仓库的提交推送到远程仓库。</p>\n<ul>\n<li><p>把本地仓库的分支推送到远程仓库的指定分支</p>\n<p>git\tpush\t&lt;远程仓库的别名&gt;\t&lt;本地分支名&gt; ：&lt;远程分支名&gt;</p>\n</li>\n</ul>\n<h3 id=\"git-remote\"><a href=\"#git-remote\" class=\"headerlink\" title=\"git remote\"></a>git remote</h3><p>操作远程库。</p>\n<ul>\n<li><p>列出已经存在的远程仓库</p>\n<p>git\tremote</p>\n</li>\n<li><p>列出远程仓库的详细信息，在别名后面列出URL地址</p>\n<p>git\tremote\t-v</p>\n<p>git\tremote\t–verbose</p>\n</li>\n<li><p>添加远程仓库</p>\n<p>git\tremote\tadd\t&lt;远程仓库的别名&gt;\t&lt;远程仓库的URL地址&gt;</p>\n</li>\n<li><p>修改远程仓库的别名</p>\n<p>git\tremote\trename \t&lt;原远程仓库的别名&gt; \t&lt;新的别名&gt;</p>\n</li>\n<li><p>删除指定名称的远程仓库</p>\n<p>git\tremote\tremove\t&lt;远程仓库的别名&gt;</p>\n</li>\n<li><p>修改远程仓库的 URL 地址</p>\n<p>git\tremote\tset-url\t&lt;远程仓库的别名&gt;\t&lt;新的远程仓库URL地址&gt;</p>\n</li>\n</ul>\n"},{"title":"MySQL数据库","date":"2022-10-13T10:09:49.000Z","cover":"https://qiansen.oss-cn-hangzhou.aliyuncs.com/MySQL数据库.png","_content":"\n#### 注释\n\n​\t单行注释: \t--注释内容 或 # 注释内容\n\n​\t多行注释:     /* 注释内容 */ \n\n#### SQL分类\n\n​\tDDL\t数据定义语言，用来定义数据库对象（数据库，表，字段）\n\n​\tDML\t数据操作语言，用来对数据库中的数据进行增删改\n\n​\tDQL\t数据查询语言，用来查询数据库中表的记录\n\n​\tDCL\t数据控制语言，用来创建数据库用户、控制数据库的访问权限\n\n##### DDL\n\n查询所有数据库\t**show databases;**\n\n查询当前数据库\t**select databases;**\n\n创建数据库\t**create database\t[if not exists]  数据库名  [defaul  charset  字符集]  [collate  排序规则]**\n\n[if not exists]\t判断数据库是否存在，存在则不创建，不会报错，不加这个创建已有数据库，会报错。\n\n[defaul  charset  字符集]\t即数据编码格式 详情看这  [mysql建数据库的字符集与排序规则说明](https://blog.csdn.net/qq_38224812/article/details/80745868)\n\n删除数据库\t**drop databases  [if exists]  数据库名;**\n\n使用数据库\t**use  数据库名;**\n\n查询当前数据库所有表\t**show tables;**\n\n查询表结构\t**desc  表名;**\n\n查询指定表的建表语句\t**show create  table 表名;**\n\n创建表\t**create  table  表名(字段  字段类型  [comment  字段注释])  [comment  表注释];**    多个字段用逗号隔开\n\n添加字段\t**alter table  表名  add  字段名  类型(长度)  [comment   注释]   [约束];**\n\n修改数据类型\t**alter  table  表名  modify  字段名  新数据类型  (长度);**\n\n修改字段名是字段类型\t**alter  table  表名  change  旧字段名  新字段名  类型(长度)  [comment  注释]  [约束];**\n\n删除字段\t**alter  table  表名  drop  字段名;**\n\n修改表名\t**alter  table  表名  rename  to  新表名;**\n\n删除表\t**drop  table  [if  exists]  表名;**\n\n删除指定表，并重新创建该表\t**truncate  table  表名;**\n\n##### DML\n\n指定字段添加数据\t**insert  into  表名  (字段1,字段2, ...)  values  (值1，值2, ...),(值1,值2, ...);**\n\n全部字段添加数据\t**insert  into  values  (值1,值2, ...),(值1,值2, ...);**\n\n修改数据\t**update  表名  set  字段1 = 值1,字段2 = 值2  [where  条件];**\n\n删除数据\t**delete  from  表名  [where  条件];**\n\n##### DQL\n\n查询数据\t**select  字段列表  from  表名   where  条件列表  group  by  分组字段列表  having  分组后条件列表  order  by  排序字段列表  limit  分页参数  **\n\n**基本查询**\t\n\n**select  字段1,字段2  ...  from  表名;**         **select * from 表名;**  (查询所有数据)\n\n设置别名\t**select  字段1  [as  别名1],字段2  [as  别名2]  ...  from  表名;**\n\n去除重复记录\t**select  distinct  字段列表  from  表名;**\n\n**条件查询**\n\n**select  字段列表  from  表名  where  条件列表;**\n\n详情 -->  [ MySQL 条件查询_WYSCODER的博客-CSDN博客_mysql 条件查询](https://blog.csdn.net/sheng0113/article/details/122165646)\n\n**聚合函数**\n\n将一列数据作为一个整体，进行纵向计算\n\n统计数量\t**count(字段名)**\n\n最大值\t**max(字段名)**\n\n最小值\t**min(字段名)**\n\n平均值\t**avg(字段名)**\n\n求和\t**sum(字段名)**\n\n**分组查询**\n\n**select  字段列表  from  表名  [where  条件]   group  by  字段分组名  [having   分组后过滤条件]**\n\n**where和having区别**\n\nhaving是在分组后对数据进行过滤\nwhere是在分组前对数据进行过滤\nhaving后面可以使用聚合函数\nwhere后面不可以使用聚合\n\n**排序查询**\n\n**select  字段列表  from  表名  order  by  字段1  排序方式1,字段2  排序方式2 ;**\n\n降序\t**DESC**\t\t升序\t**ASC**    (默认)\t\t\n\n**多字段排序时，第一个字段值相同时，才会根据第二个字段进行排序**\n\n**分页查询**\n\n**select  字段列表  from  表名  limit  起始索引，查询记录数;**\n\n**起始索引从0开始,起始索引 = (查询页码-1) * 每页显示记录数。**\n\n**如果查询的是第一页数据，起始索引可以省略，直接简写为limit 10。**\n\n**执行顺序**\n\n**from  表名列表  where  条件列表  group by 分组字段列表  having  分组后条件列表  select 字段列表  order by 排序字段列表   limit  分页参数**\n\n**DCL**\n\n查询用户\t**use mysql;**\t**select * from user;**\n\n创建用户\t**create  user  '用户名'@'主机名'   identified by  '密码';**\n\n修改用户密码\t**alter  user  '用户名'@'主机名'   identified  with  mysql_native_password  by  '新密码';**\n\n删除用户\t**drop  user  '用户名'@'主机名';**\n\n查询权限\t**show  grants  for  '用户名'@'主机名';**\n\n授予权限\t**grant  权限列表  on  数据库名.表名  to  '用户名'@'主机名';**\n\n撤销权限\t**revoke  权限列表  on  数据库名.表名  from  '用户名'@'主机名';**\n\n#### 约束\n\n详情--> [MySQL约束总结(CONSTRAINT)](https://blog.csdn.net/z_johnny/article/details/113820405)\t\t主键自增: auto_increment(在主键约束后加即可中间空格)\n\n**外键约束**\t[MySQL：简述MySQL外键约束](https://xiaoer.blog.csdn.net/article/details/86293678?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-86293678-blog-125227840.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-86293678-blog-125227840.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=6)\n\n#### 多表查询\n\n**多表关系**\n\n一对多(多对一)\t\t实现：在多的一方建立外键，指向一的一方的主键\n\n多对多\t\t实现: 建立第三张中间表，中间表至少包含两个外键，分别关联两方主键。\n\n一对一\t\t多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中。\n\n实现:\t**在任意一方加入外键，关联另外一方的主键，并且设置外键是唯一的(unique)**\n\n#### 连接查询\n\n内连接:\t**相当于查询A、b交集部分数据**\n\n外连接:\t**左外连接:\t查询左表所有数据，以及两张表交集部分数据。**\t**右外连接:\t查询右表所有数据，以**及两张表交际部分数据。**\n\n自连接:\t**当前表与自身的连接查询，自连接必须使用别名。**\t\n\n子查询\n\n![连接查询](https://qiansen.oss-cn-hangzhou.aliyuncs.com/%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2.png)\n\n**内连接**\n\n隐式内连接\t\t**select  字段列表  from  表1，表2   where  条件 ...;**\n\n显示内连接\t\t**select  字段列表  from  表1  [inner]  join  表2  on  连接条件;**\n\n**外连接**\n\n左外连接\t\t\t**select  字段列表  from  表1  left  [outer]  join  表2  on  连接条件;**\n\n右外连接\t\t\t**select  字段列表  from  表1  right  [outer]  join  表2  on  连接条件;**\n\n**自连接**\n\n**select  字段列表  from  表A  别名A  join  表A  别名B  on  条件 ...;**\t\t(自连接，可以是内连接，也可以是外连接)\n\n**联合查询**\n\n**select  字段列表  from  表A  ...  union [all]  select  字段列表  from  表B  ...;**\t\t\t\n\n对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。\n\nunion  all  会将全部的数据直接合并在一起，union会对合并之后的数据去重。\n\n**子查询**\n\n#### 事务\n\n事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。\n\n**查看/设置事务提交方式**\t\t**selcet  @@autocommit;**\t(显示1为自动提交，mysql默认为1=自动)\t\t\t**set  @@autocommit = 0;**  (设置为手动提交)\n\n**提交事务**\t\t**commit;**\n\n**回滚事务**\t\t**rollback;**\n\n**开启事务**\t\t**start  transacition**    或   **begin**\n\n**事务四大特性(ACID):**\n\n**原子性(Atomicity):**\t\t事务是不可分割的最小操作单元，要么全部成功，要么全部失败。\n\n**一致性(Consistency):**\t\t事务完成时，必须使所有的数据都保持一致状态。\n\n**隔离性(Isolation):**\t\t数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。\n\n**持久性(Durability):**\t\t事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。\n\n**并发事务问题**\n\n**脏读**\t\t\t\t\t一个事务读到另外一个事务还没有提交的数据。\n\n**不可重复读\t**\t一个事务先后读取同一条记录，但两次读取的数据不同。\n\n**幻读**\t\t\t\t\t一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存 在，好像出现了‘幻影‘。\n\n**事务隔离级别**\t\t\t\t\t\t\t\t\t\t\t                      脏读\t\t\t\t\t不可重复读\t\t\t\t\t\t幻读\n\n**Read uncommitted**（读未提交）\t\t\t\t\t\t\t   √\t\t\t\t\t\t\t\t√\t\t\t\t\t\t\t\t\t√\n\n**Read committed**（读已提交）\t\t\t\t\t\t\t\t\t×\t\t\t\t\t\t\t\t√\t\t\t\t\t\t\t\t\t√\n\n**Repeatable Read**（可重复读）\t\t\t\t\t\t\t\t    ×\t\t\t\t\t\t\t\t×\t\t\t\t\t\t\t\t\t√\n\n**Serializable**（序列化）\t\t\t\t\t\t\t\t\t\t\t      ×\t\t\t\t\t\t\t\t×\t\t\t\t\t\t\t\t\t ×\n\n**查看事务隔离级别**\t\t\t**select  @@transacition_isolation;**\n\n**设置事务隔离级别**\t\t\t**set  [session | global ]  transacition isolation level  {read uncommitted | read comitted | Repeatable Read | Serializable}**   （事务级别关键字不区分大小写）\n\n事务隔离级别越高，数据越安全，但是性能越低。","source":"_posts/MySQL数据库.md","raw":"---\ntitle: MySQL数据库\ndate: 2022-10-13 18:09:49\ncover: https://qiansen.oss-cn-hangzhou.aliyuncs.com/MySQL数据库.png\ntags: 学习\ncategory: 学习\n---\n\n#### 注释\n\n​\t单行注释: \t--注释内容 或 # 注释内容\n\n​\t多行注释:     /* 注释内容 */ \n\n#### SQL分类\n\n​\tDDL\t数据定义语言，用来定义数据库对象（数据库，表，字段）\n\n​\tDML\t数据操作语言，用来对数据库中的数据进行增删改\n\n​\tDQL\t数据查询语言，用来查询数据库中表的记录\n\n​\tDCL\t数据控制语言，用来创建数据库用户、控制数据库的访问权限\n\n##### DDL\n\n查询所有数据库\t**show databases;**\n\n查询当前数据库\t**select databases;**\n\n创建数据库\t**create database\t[if not exists]  数据库名  [defaul  charset  字符集]  [collate  排序规则]**\n\n[if not exists]\t判断数据库是否存在，存在则不创建，不会报错，不加这个创建已有数据库，会报错。\n\n[defaul  charset  字符集]\t即数据编码格式 详情看这  [mysql建数据库的字符集与排序规则说明](https://blog.csdn.net/qq_38224812/article/details/80745868)\n\n删除数据库\t**drop databases  [if exists]  数据库名;**\n\n使用数据库\t**use  数据库名;**\n\n查询当前数据库所有表\t**show tables;**\n\n查询表结构\t**desc  表名;**\n\n查询指定表的建表语句\t**show create  table 表名;**\n\n创建表\t**create  table  表名(字段  字段类型  [comment  字段注释])  [comment  表注释];**    多个字段用逗号隔开\n\n添加字段\t**alter table  表名  add  字段名  类型(长度)  [comment   注释]   [约束];**\n\n修改数据类型\t**alter  table  表名  modify  字段名  新数据类型  (长度);**\n\n修改字段名是字段类型\t**alter  table  表名  change  旧字段名  新字段名  类型(长度)  [comment  注释]  [约束];**\n\n删除字段\t**alter  table  表名  drop  字段名;**\n\n修改表名\t**alter  table  表名  rename  to  新表名;**\n\n删除表\t**drop  table  [if  exists]  表名;**\n\n删除指定表，并重新创建该表\t**truncate  table  表名;**\n\n##### DML\n\n指定字段添加数据\t**insert  into  表名  (字段1,字段2, ...)  values  (值1，值2, ...),(值1,值2, ...);**\n\n全部字段添加数据\t**insert  into  values  (值1,值2, ...),(值1,值2, ...);**\n\n修改数据\t**update  表名  set  字段1 = 值1,字段2 = 值2  [where  条件];**\n\n删除数据\t**delete  from  表名  [where  条件];**\n\n##### DQL\n\n查询数据\t**select  字段列表  from  表名   where  条件列表  group  by  分组字段列表  having  分组后条件列表  order  by  排序字段列表  limit  分页参数  **\n\n**基本查询**\t\n\n**select  字段1,字段2  ...  from  表名;**         **select * from 表名;**  (查询所有数据)\n\n设置别名\t**select  字段1  [as  别名1],字段2  [as  别名2]  ...  from  表名;**\n\n去除重复记录\t**select  distinct  字段列表  from  表名;**\n\n**条件查询**\n\n**select  字段列表  from  表名  where  条件列表;**\n\n详情 -->  [ MySQL 条件查询_WYSCODER的博客-CSDN博客_mysql 条件查询](https://blog.csdn.net/sheng0113/article/details/122165646)\n\n**聚合函数**\n\n将一列数据作为一个整体，进行纵向计算\n\n统计数量\t**count(字段名)**\n\n最大值\t**max(字段名)**\n\n最小值\t**min(字段名)**\n\n平均值\t**avg(字段名)**\n\n求和\t**sum(字段名)**\n\n**分组查询**\n\n**select  字段列表  from  表名  [where  条件]   group  by  字段分组名  [having   分组后过滤条件]**\n\n**where和having区别**\n\nhaving是在分组后对数据进行过滤\nwhere是在分组前对数据进行过滤\nhaving后面可以使用聚合函数\nwhere后面不可以使用聚合\n\n**排序查询**\n\n**select  字段列表  from  表名  order  by  字段1  排序方式1,字段2  排序方式2 ;**\n\n降序\t**DESC**\t\t升序\t**ASC**    (默认)\t\t\n\n**多字段排序时，第一个字段值相同时，才会根据第二个字段进行排序**\n\n**分页查询**\n\n**select  字段列表  from  表名  limit  起始索引，查询记录数;**\n\n**起始索引从0开始,起始索引 = (查询页码-1) * 每页显示记录数。**\n\n**如果查询的是第一页数据，起始索引可以省略，直接简写为limit 10。**\n\n**执行顺序**\n\n**from  表名列表  where  条件列表  group by 分组字段列表  having  分组后条件列表  select 字段列表  order by 排序字段列表   limit  分页参数**\n\n**DCL**\n\n查询用户\t**use mysql;**\t**select * from user;**\n\n创建用户\t**create  user  '用户名'@'主机名'   identified by  '密码';**\n\n修改用户密码\t**alter  user  '用户名'@'主机名'   identified  with  mysql_native_password  by  '新密码';**\n\n删除用户\t**drop  user  '用户名'@'主机名';**\n\n查询权限\t**show  grants  for  '用户名'@'主机名';**\n\n授予权限\t**grant  权限列表  on  数据库名.表名  to  '用户名'@'主机名';**\n\n撤销权限\t**revoke  权限列表  on  数据库名.表名  from  '用户名'@'主机名';**\n\n#### 约束\n\n详情--> [MySQL约束总结(CONSTRAINT)](https://blog.csdn.net/z_johnny/article/details/113820405)\t\t主键自增: auto_increment(在主键约束后加即可中间空格)\n\n**外键约束**\t[MySQL：简述MySQL外键约束](https://xiaoer.blog.csdn.net/article/details/86293678?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-86293678-blog-125227840.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-86293678-blog-125227840.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=6)\n\n#### 多表查询\n\n**多表关系**\n\n一对多(多对一)\t\t实现：在多的一方建立外键，指向一的一方的主键\n\n多对多\t\t实现: 建立第三张中间表，中间表至少包含两个外键，分别关联两方主键。\n\n一对一\t\t多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中。\n\n实现:\t**在任意一方加入外键，关联另外一方的主键，并且设置外键是唯一的(unique)**\n\n#### 连接查询\n\n内连接:\t**相当于查询A、b交集部分数据**\n\n外连接:\t**左外连接:\t查询左表所有数据，以及两张表交集部分数据。**\t**右外连接:\t查询右表所有数据，以**及两张表交际部分数据。**\n\n自连接:\t**当前表与自身的连接查询，自连接必须使用别名。**\t\n\n子查询\n\n![连接查询](https://qiansen.oss-cn-hangzhou.aliyuncs.com/%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2.png)\n\n**内连接**\n\n隐式内连接\t\t**select  字段列表  from  表1，表2   where  条件 ...;**\n\n显示内连接\t\t**select  字段列表  from  表1  [inner]  join  表2  on  连接条件;**\n\n**外连接**\n\n左外连接\t\t\t**select  字段列表  from  表1  left  [outer]  join  表2  on  连接条件;**\n\n右外连接\t\t\t**select  字段列表  from  表1  right  [outer]  join  表2  on  连接条件;**\n\n**自连接**\n\n**select  字段列表  from  表A  别名A  join  表A  别名B  on  条件 ...;**\t\t(自连接，可以是内连接，也可以是外连接)\n\n**联合查询**\n\n**select  字段列表  from  表A  ...  union [all]  select  字段列表  from  表B  ...;**\t\t\t\n\n对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。\n\nunion  all  会将全部的数据直接合并在一起，union会对合并之后的数据去重。\n\n**子查询**\n\n#### 事务\n\n事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。\n\n**查看/设置事务提交方式**\t\t**selcet  @@autocommit;**\t(显示1为自动提交，mysql默认为1=自动)\t\t\t**set  @@autocommit = 0;**  (设置为手动提交)\n\n**提交事务**\t\t**commit;**\n\n**回滚事务**\t\t**rollback;**\n\n**开启事务**\t\t**start  transacition**    或   **begin**\n\n**事务四大特性(ACID):**\n\n**原子性(Atomicity):**\t\t事务是不可分割的最小操作单元，要么全部成功，要么全部失败。\n\n**一致性(Consistency):**\t\t事务完成时，必须使所有的数据都保持一致状态。\n\n**隔离性(Isolation):**\t\t数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。\n\n**持久性(Durability):**\t\t事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。\n\n**并发事务问题**\n\n**脏读**\t\t\t\t\t一个事务读到另外一个事务还没有提交的数据。\n\n**不可重复读\t**\t一个事务先后读取同一条记录，但两次读取的数据不同。\n\n**幻读**\t\t\t\t\t一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存 在，好像出现了‘幻影‘。\n\n**事务隔离级别**\t\t\t\t\t\t\t\t\t\t\t                      脏读\t\t\t\t\t不可重复读\t\t\t\t\t\t幻读\n\n**Read uncommitted**（读未提交）\t\t\t\t\t\t\t   √\t\t\t\t\t\t\t\t√\t\t\t\t\t\t\t\t\t√\n\n**Read committed**（读已提交）\t\t\t\t\t\t\t\t\t×\t\t\t\t\t\t\t\t√\t\t\t\t\t\t\t\t\t√\n\n**Repeatable Read**（可重复读）\t\t\t\t\t\t\t\t    ×\t\t\t\t\t\t\t\t×\t\t\t\t\t\t\t\t\t√\n\n**Serializable**（序列化）\t\t\t\t\t\t\t\t\t\t\t      ×\t\t\t\t\t\t\t\t×\t\t\t\t\t\t\t\t\t ×\n\n**查看事务隔离级别**\t\t\t**select  @@transacition_isolation;**\n\n**设置事务隔离级别**\t\t\t**set  [session | global ]  transacition isolation level  {read uncommitted | read comitted | Repeatable Read | Serializable}**   （事务级别关键字不区分大小写）\n\n事务隔离级别越高，数据越安全，但是性能越低。","slug":"MySQL数据库","published":1,"updated":"2022-10-25T08:15:55.713Z","_id":"cl9cegjci0000uow18li52ko0","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><p>​\t单行注释: \t–注释内容 或 # 注释内容</p>\n<p>​\t多行注释:     &#x2F;* 注释内容 *&#x2F; </p>\n<h4 id=\"SQL分类\"><a href=\"#SQL分类\" class=\"headerlink\" title=\"SQL分类\"></a>SQL分类</h4><p>​\tDDL\t数据定义语言，用来定义数据库对象（数据库，表，字段）</p>\n<p>​\tDML\t数据操作语言，用来对数据库中的数据进行增删改</p>\n<p>​\tDQL\t数据查询语言，用来查询数据库中表的记录</p>\n<p>​\tDCL\t数据控制语言，用来创建数据库用户、控制数据库的访问权限</p>\n<h5 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h5><p>查询所有数据库\t<strong>show databases;</strong></p>\n<p>查询当前数据库\t<strong>select databases;</strong></p>\n<p>创建数据库\t<strong>create database\t[if not exists]  数据库名  [defaul  charset  字符集]  [collate  排序规则]</strong></p>\n<p>[if not exists]\t判断数据库是否存在，存在则不创建，不会报错，不加这个创建已有数据库，会报错。</p>\n<p>[defaul  charset  字符集]\t即数据编码格式 详情看这  <a href=\"https://blog.csdn.net/qq_38224812/article/details/80745868\">mysql建数据库的字符集与排序规则说明</a></p>\n<p>删除数据库\t<strong>drop databases  [if exists]  数据库名;</strong></p>\n<p>使用数据库\t<strong>use  数据库名;</strong></p>\n<p>查询当前数据库所有表\t<strong>show tables;</strong></p>\n<p>查询表结构\t<strong>desc  表名;</strong></p>\n<p>查询指定表的建表语句\t<strong>show create  table 表名;</strong></p>\n<p>创建表\t<strong>create  table  表名(字段  字段类型  [comment  字段注释])  [comment  表注释];</strong>    多个字段用逗号隔开</p>\n<p>添加字段\t<strong>alter table  表名  add  字段名  类型(长度)  [comment   注释]   [约束];</strong></p>\n<p>修改数据类型\t<strong>alter  table  表名  modify  字段名  新数据类型  (长度);</strong></p>\n<p>修改字段名是字段类型\t<strong>alter  table  表名  change  旧字段名  新字段名  类型(长度)  [comment  注释]  [约束];</strong></p>\n<p>删除字段\t<strong>alter  table  表名  drop  字段名;</strong></p>\n<p>修改表名\t<strong>alter  table  表名  rename  to  新表名;</strong></p>\n<p>删除表\t<strong>drop  table  [if  exists]  表名;</strong></p>\n<p>删除指定表，并重新创建该表\t<strong>truncate  table  表名;</strong></p>\n<h5 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h5><p>指定字段添加数据\t<strong>insert  into  表名  (字段1,字段2, …)  values  (值1，值2, …),(值1,值2, …);</strong></p>\n<p>全部字段添加数据\t<strong>insert  into  values  (值1,值2, …),(值1,值2, …);</strong></p>\n<p>修改数据\t<strong>update  表名  set  字段1 &#x3D; 值1,字段2 &#x3D; 值2  [where  条件];</strong></p>\n<p>删除数据\t<strong>delete  from  表名  [where  条件];</strong></p>\n<h5 id=\"DQL\"><a href=\"#DQL\" class=\"headerlink\" title=\"DQL\"></a>DQL</h5><p>查询数据\t**select  字段列表  from  表名   where  条件列表  group  by  分组字段列表  having  分组后条件列表  order  by  排序字段列表  limit  分页参数  **</p>\n<p><strong>基本查询</strong>\t</p>\n<p><strong>select  字段1,字段2  …  from  表名;</strong>         <strong>select * from 表名;</strong>  (查询所有数据)</p>\n<p>设置别名\t<strong>select  字段1  [as  别名1],字段2  [as  别名2]  …  from  表名;</strong></p>\n<p>去除重复记录\t<strong>select  distinct  字段列表  from  表名;</strong></p>\n<p><strong>条件查询</strong></p>\n<p><strong>select  字段列表  from  表名  where  条件列表;</strong></p>\n<p>详情 –&gt;  <a href=\"https://blog.csdn.net/sheng0113/article/details/122165646\"> MySQL 条件查询_WYSCODER的博客-CSDN博客_mysql 条件查询</a></p>\n<p><strong>聚合函数</strong></p>\n<p>将一列数据作为一个整体，进行纵向计算</p>\n<p>统计数量\t<strong>count(字段名)</strong></p>\n<p>最大值\t<strong>max(字段名)</strong></p>\n<p>最小值\t<strong>min(字段名)</strong></p>\n<p>平均值\t<strong>avg(字段名)</strong></p>\n<p>求和\t<strong>sum(字段名)</strong></p>\n<p><strong>分组查询</strong></p>\n<p><strong>select  字段列表  from  表名  [where  条件]   group  by  字段分组名  [having   分组后过滤条件]</strong></p>\n<p><strong>where和having区别</strong></p>\n<p>having是在分组后对数据进行过滤<br>where是在分组前对数据进行过滤<br>having后面可以使用聚合函数<br>where后面不可以使用聚合</p>\n<p><strong>排序查询</strong></p>\n<p><strong>select  字段列表  from  表名  order  by  字段1  排序方式1,字段2  排序方式2 ;</strong></p>\n<p>降序\t<strong>DESC</strong>\t\t升序\t<strong>ASC</strong>    (默认)\t\t</p>\n<p><strong>多字段排序时，第一个字段值相同时，才会根据第二个字段进行排序</strong></p>\n<p><strong>分页查询</strong></p>\n<p><strong>select  字段列表  from  表名  limit  起始索引，查询记录数;</strong></p>\n<p><strong>起始索引从0开始,起始索引 &#x3D; (查询页码-1) * 每页显示记录数。</strong></p>\n<p><strong>如果查询的是第一页数据，起始索引可以省略，直接简写为limit 10。</strong></p>\n<p><strong>执行顺序</strong></p>\n<p><strong>from  表名列表  where  条件列表  group by 分组字段列表  having  分组后条件列表  select 字段列表  order by 排序字段列表   limit  分页参数</strong></p>\n<p><strong>DCL</strong></p>\n<p>查询用户\t<strong>use mysql;</strong>\t<strong>select * from user;</strong></p>\n<p>创建用户\t<strong>create  user  ‘用户名‘@’主机名’   identified by  ‘密码’;</strong></p>\n<p>修改用户密码\t<strong>alter  user  ‘用户名‘@’主机名’   identified  with  mysql_native_password  by  ‘新密码’;</strong></p>\n<p>删除用户\t<strong>drop  user  ‘用户名‘@’主机名’;</strong></p>\n<p>查询权限\t<strong>show  grants  for  ‘用户名‘@’主机名’;</strong></p>\n<p>授予权限\t<strong>grant  权限列表  on  数据库名.表名  to  ‘用户名‘@’主机名’;</strong></p>\n<p>撤销权限\t<strong>revoke  权限列表  on  数据库名.表名  from  ‘用户名‘@’主机名’;</strong></p>\n<h4 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h4><p>详情–&gt; <a href=\"https://blog.csdn.net/z_johnny/article/details/113820405\">MySQL约束总结(CONSTRAINT)</a>\t\t主键自增: auto_increment(在主键约束后加即可中间空格)</p>\n<p><strong>外键约束</strong>\t<a href=\"https://xiaoer.blog.csdn.net/article/details/86293678?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-86293678-blog-125227840.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-86293678-blog-125227840.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=6\">MySQL：简述MySQL外键约束</a></p>\n<h4 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h4><p><strong>多表关系</strong></p>\n<p>一对多(多对一)\t\t实现：在多的一方建立外键，指向一的一方的主键</p>\n<p>多对多\t\t实现: 建立第三张中间表，中间表至少包含两个外键，分别关联两方主键。</p>\n<p>一对一\t\t多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中。</p>\n<p>实现:\t<strong>在任意一方加入外键，关联另外一方的主键，并且设置外键是唯一的(unique)</strong></p>\n<h4 id=\"连接查询\"><a href=\"#连接查询\" class=\"headerlink\" title=\"连接查询\"></a>连接查询</h4><p>内连接:\t<strong>相当于查询A、b交集部分数据</strong></p>\n<p>外连接:\t<strong>左外连接:\t查询左表所有数据，以及两张表交集部分数据。</strong>\t<strong>右外连接:\t查询右表所有数据，以</strong>及两张表交际部分数据。**</p>\n<p>自连接:\t<strong>当前表与自身的连接查询，自连接必须使用别名。</strong>\t</p>\n<p>子查询</p>\n<p><img src=\"https://qiansen.oss-cn-hangzhou.aliyuncs.com/%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2.png\" alt=\"连接查询\"></p>\n<p><strong>内连接</strong></p>\n<p>隐式内连接\t\t<strong>select  字段列表  from  表1，表2   where  条件 …;</strong></p>\n<p>显示内连接\t\t<strong>select  字段列表  from  表1  [inner]  join  表2  on  连接条件;</strong></p>\n<p><strong>外连接</strong></p>\n<p>左外连接\t\t\t<strong>select  字段列表  from  表1  left  [outer]  join  表2  on  连接条件;</strong></p>\n<p>右外连接\t\t\t<strong>select  字段列表  from  表1  right  [outer]  join  表2  on  连接条件;</strong></p>\n<p><strong>自连接</strong></p>\n<p><strong>select  字段列表  from  表A  别名A  join  表A  别名B  on  条件 …;</strong>\t\t(自连接，可以是内连接，也可以是外连接)</p>\n<p><strong>联合查询</strong></p>\n<p><strong>select  字段列表  from  表A  …  union [all]  select  字段列表  from  表B  …;</strong>\t\t\t</p>\n<p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。</p>\n<p>union  all  会将全部的数据直接合并在一起，union会对合并之后的数据去重。</p>\n<p><strong>子查询</strong></p>\n<h4 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h4><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>\n<p><strong>查看&#x2F;设置事务提交方式</strong>\t\t<strong>selcet  @@autocommit;</strong>\t(显示1为自动提交，mysql默认为1&#x3D;自动)\t\t\t<strong>set  @@autocommit &#x3D; 0;</strong>  (设置为手动提交)</p>\n<p><strong>提交事务</strong>\t\t<strong>commit;</strong></p>\n<p><strong>回滚事务</strong>\t\t<strong>rollback;</strong></p>\n<p><strong>开启事务</strong>\t\t<strong>start  transacition</strong>    或   <strong>begin</strong></p>\n<p><strong>事务四大特性(ACID):</strong></p>\n<p><strong>原子性(Atomicity):</strong>\t\t事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</p>\n<p><strong>一致性(Consistency):</strong>\t\t事务完成时，必须使所有的数据都保持一致状态。</p>\n<p><strong>隔离性(Isolation):</strong>\t\t数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</p>\n<p><strong>持久性(Durability):</strong>\t\t事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</p>\n<p><strong>并发事务问题</strong></p>\n<p><strong>脏读</strong>\t\t\t\t\t一个事务读到另外一个事务还没有提交的数据。</p>\n<p>**不可重复读\t**\t一个事务先后读取同一条记录，但两次读取的数据不同。</p>\n<p><strong>幻读</strong>\t\t\t\t\t一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存 在，好像出现了‘幻影‘。</p>\n<p><strong>事务隔离级别</strong>\t\t\t\t\t\t\t\t\t\t\t                      脏读\t\t\t\t\t不可重复读\t\t\t\t\t\t幻读</p>\n<p><strong>Read uncommitted</strong>（读未提交）\t\t\t\t\t\t\t   √\t\t\t\t\t\t\t\t√\t\t\t\t\t\t\t\t\t√</p>\n<p><strong>Read committed</strong>（读已提交）\t\t\t\t\t\t\t\t\t×\t\t\t\t\t\t\t\t√\t\t\t\t\t\t\t\t\t√</p>\n<p><strong>Repeatable Read</strong>（可重复读）\t\t\t\t\t\t\t\t    ×\t\t\t\t\t\t\t\t×\t\t\t\t\t\t\t\t\t√</p>\n<p><strong>Serializable</strong>（序列化）\t\t\t\t\t\t\t\t\t\t\t      ×\t\t\t\t\t\t\t\t×\t\t\t\t\t\t\t\t\t ×</p>\n<p><strong>查看事务隔离级别</strong>\t\t\t<strong>select  @@transacition_isolation;</strong></p>\n<p><strong>设置事务隔离级别</strong>\t\t\t<strong>set  [session | global ]  transacition isolation level  {read uncommitted | read comitted | Repeatable Read | Serializable}</strong>   （事务级别关键字不区分大小写）</p>\n<p>事务隔离级别越高，数据越安全，但是性能越低。</p>\n","site":{"data":{"links":[{"name":"yixin","link":"https://blog.yixinfangfa.top/","description":"","avatar":""},{"name":"GiriNeko的猫窝","link":" https://ineko.cc/","description":"一头会说话的咸鱼","avatar":"https://static.ineko.cc/images/favicon.png"}]}},"excerpt":"","more":"<h4 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h4><p>​\t单行注释: \t–注释内容 或 # 注释内容</p>\n<p>​\t多行注释:     &#x2F;* 注释内容 *&#x2F; </p>\n<h4 id=\"SQL分类\"><a href=\"#SQL分类\" class=\"headerlink\" title=\"SQL分类\"></a>SQL分类</h4><p>​\tDDL\t数据定义语言，用来定义数据库对象（数据库，表，字段）</p>\n<p>​\tDML\t数据操作语言，用来对数据库中的数据进行增删改</p>\n<p>​\tDQL\t数据查询语言，用来查询数据库中表的记录</p>\n<p>​\tDCL\t数据控制语言，用来创建数据库用户、控制数据库的访问权限</p>\n<h5 id=\"DDL\"><a href=\"#DDL\" class=\"headerlink\" title=\"DDL\"></a>DDL</h5><p>查询所有数据库\t<strong>show databases;</strong></p>\n<p>查询当前数据库\t<strong>select databases;</strong></p>\n<p>创建数据库\t<strong>create database\t[if not exists]  数据库名  [defaul  charset  字符集]  [collate  排序规则]</strong></p>\n<p>[if not exists]\t判断数据库是否存在，存在则不创建，不会报错，不加这个创建已有数据库，会报错。</p>\n<p>[defaul  charset  字符集]\t即数据编码格式 详情看这  <a href=\"https://blog.csdn.net/qq_38224812/article/details/80745868\">mysql建数据库的字符集与排序规则说明</a></p>\n<p>删除数据库\t<strong>drop databases  [if exists]  数据库名;</strong></p>\n<p>使用数据库\t<strong>use  数据库名;</strong></p>\n<p>查询当前数据库所有表\t<strong>show tables;</strong></p>\n<p>查询表结构\t<strong>desc  表名;</strong></p>\n<p>查询指定表的建表语句\t<strong>show create  table 表名;</strong></p>\n<p>创建表\t<strong>create  table  表名(字段  字段类型  [comment  字段注释])  [comment  表注释];</strong>    多个字段用逗号隔开</p>\n<p>添加字段\t<strong>alter table  表名  add  字段名  类型(长度)  [comment   注释]   [约束];</strong></p>\n<p>修改数据类型\t<strong>alter  table  表名  modify  字段名  新数据类型  (长度);</strong></p>\n<p>修改字段名是字段类型\t<strong>alter  table  表名  change  旧字段名  新字段名  类型(长度)  [comment  注释]  [约束];</strong></p>\n<p>删除字段\t<strong>alter  table  表名  drop  字段名;</strong></p>\n<p>修改表名\t<strong>alter  table  表名  rename  to  新表名;</strong></p>\n<p>删除表\t<strong>drop  table  [if  exists]  表名;</strong></p>\n<p>删除指定表，并重新创建该表\t<strong>truncate  table  表名;</strong></p>\n<h5 id=\"DML\"><a href=\"#DML\" class=\"headerlink\" title=\"DML\"></a>DML</h5><p>指定字段添加数据\t<strong>insert  into  表名  (字段1,字段2, …)  values  (值1，值2, …),(值1,值2, …);</strong></p>\n<p>全部字段添加数据\t<strong>insert  into  values  (值1,值2, …),(值1,值2, …);</strong></p>\n<p>修改数据\t<strong>update  表名  set  字段1 &#x3D; 值1,字段2 &#x3D; 值2  [where  条件];</strong></p>\n<p>删除数据\t<strong>delete  from  表名  [where  条件];</strong></p>\n<h5 id=\"DQL\"><a href=\"#DQL\" class=\"headerlink\" title=\"DQL\"></a>DQL</h5><p>查询数据\t**select  字段列表  from  表名   where  条件列表  group  by  分组字段列表  having  分组后条件列表  order  by  排序字段列表  limit  分页参数  **</p>\n<p><strong>基本查询</strong>\t</p>\n<p><strong>select  字段1,字段2  …  from  表名;</strong>         <strong>select * from 表名;</strong>  (查询所有数据)</p>\n<p>设置别名\t<strong>select  字段1  [as  别名1],字段2  [as  别名2]  …  from  表名;</strong></p>\n<p>去除重复记录\t<strong>select  distinct  字段列表  from  表名;</strong></p>\n<p><strong>条件查询</strong></p>\n<p><strong>select  字段列表  from  表名  where  条件列表;</strong></p>\n<p>详情 –&gt;  <a href=\"https://blog.csdn.net/sheng0113/article/details/122165646\"> MySQL 条件查询_WYSCODER的博客-CSDN博客_mysql 条件查询</a></p>\n<p><strong>聚合函数</strong></p>\n<p>将一列数据作为一个整体，进行纵向计算</p>\n<p>统计数量\t<strong>count(字段名)</strong></p>\n<p>最大值\t<strong>max(字段名)</strong></p>\n<p>最小值\t<strong>min(字段名)</strong></p>\n<p>平均值\t<strong>avg(字段名)</strong></p>\n<p>求和\t<strong>sum(字段名)</strong></p>\n<p><strong>分组查询</strong></p>\n<p><strong>select  字段列表  from  表名  [where  条件]   group  by  字段分组名  [having   分组后过滤条件]</strong></p>\n<p><strong>where和having区别</strong></p>\n<p>having是在分组后对数据进行过滤<br>where是在分组前对数据进行过滤<br>having后面可以使用聚合函数<br>where后面不可以使用聚合</p>\n<p><strong>排序查询</strong></p>\n<p><strong>select  字段列表  from  表名  order  by  字段1  排序方式1,字段2  排序方式2 ;</strong></p>\n<p>降序\t<strong>DESC</strong>\t\t升序\t<strong>ASC</strong>    (默认)\t\t</p>\n<p><strong>多字段排序时，第一个字段值相同时，才会根据第二个字段进行排序</strong></p>\n<p><strong>分页查询</strong></p>\n<p><strong>select  字段列表  from  表名  limit  起始索引，查询记录数;</strong></p>\n<p><strong>起始索引从0开始,起始索引 &#x3D; (查询页码-1) * 每页显示记录数。</strong></p>\n<p><strong>如果查询的是第一页数据，起始索引可以省略，直接简写为limit 10。</strong></p>\n<p><strong>执行顺序</strong></p>\n<p><strong>from  表名列表  where  条件列表  group by 分组字段列表  having  分组后条件列表  select 字段列表  order by 排序字段列表   limit  分页参数</strong></p>\n<p><strong>DCL</strong></p>\n<p>查询用户\t<strong>use mysql;</strong>\t<strong>select * from user;</strong></p>\n<p>创建用户\t<strong>create  user  ‘用户名‘@’主机名’   identified by  ‘密码’;</strong></p>\n<p>修改用户密码\t<strong>alter  user  ‘用户名‘@’主机名’   identified  with  mysql_native_password  by  ‘新密码’;</strong></p>\n<p>删除用户\t<strong>drop  user  ‘用户名‘@’主机名’;</strong></p>\n<p>查询权限\t<strong>show  grants  for  ‘用户名‘@’主机名’;</strong></p>\n<p>授予权限\t<strong>grant  权限列表  on  数据库名.表名  to  ‘用户名‘@’主机名’;</strong></p>\n<p>撤销权限\t<strong>revoke  权限列表  on  数据库名.表名  from  ‘用户名‘@’主机名’;</strong></p>\n<h4 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h4><p>详情–&gt; <a href=\"https://blog.csdn.net/z_johnny/article/details/113820405\">MySQL约束总结(CONSTRAINT)</a>\t\t主键自增: auto_increment(在主键约束后加即可中间空格)</p>\n<p><strong>外键约束</strong>\t<a href=\"https://xiaoer.blog.csdn.net/article/details/86293678?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-86293678-blog-125227840.pc_relevant_multi_platform_whitelistv4&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-3-86293678-blog-125227840.pc_relevant_multi_platform_whitelistv4&utm_relevant_index=6\">MySQL：简述MySQL外键约束</a></p>\n<h4 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h4><p><strong>多表关系</strong></p>\n<p>一对多(多对一)\t\t实现：在多的一方建立外键，指向一的一方的主键</p>\n<p>多对多\t\t实现: 建立第三张中间表，中间表至少包含两个外键，分别关联两方主键。</p>\n<p>一对一\t\t多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中。</p>\n<p>实现:\t<strong>在任意一方加入外键，关联另外一方的主键，并且设置外键是唯一的(unique)</strong></p>\n<h4 id=\"连接查询\"><a href=\"#连接查询\" class=\"headerlink\" title=\"连接查询\"></a>连接查询</h4><p>内连接:\t<strong>相当于查询A、b交集部分数据</strong></p>\n<p>外连接:\t<strong>左外连接:\t查询左表所有数据，以及两张表交集部分数据。</strong>\t<strong>右外连接:\t查询右表所有数据，以</strong>及两张表交际部分数据。**</p>\n<p>自连接:\t<strong>当前表与自身的连接查询，自连接必须使用别名。</strong>\t</p>\n<p>子查询</p>\n<p><img src=\"https://qiansen.oss-cn-hangzhou.aliyuncs.com/%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2.png\" alt=\"连接查询\"></p>\n<p><strong>内连接</strong></p>\n<p>隐式内连接\t\t<strong>select  字段列表  from  表1，表2   where  条件 …;</strong></p>\n<p>显示内连接\t\t<strong>select  字段列表  from  表1  [inner]  join  表2  on  连接条件;</strong></p>\n<p><strong>外连接</strong></p>\n<p>左外连接\t\t\t<strong>select  字段列表  from  表1  left  [outer]  join  表2  on  连接条件;</strong></p>\n<p>右外连接\t\t\t<strong>select  字段列表  from  表1  right  [outer]  join  表2  on  连接条件;</strong></p>\n<p><strong>自连接</strong></p>\n<p><strong>select  字段列表  from  表A  别名A  join  表A  别名B  on  条件 …;</strong>\t\t(自连接，可以是内连接，也可以是外连接)</p>\n<p><strong>联合查询</strong></p>\n<p><strong>select  字段列表  from  表A  …  union [all]  select  字段列表  from  表B  …;</strong>\t\t\t</p>\n<p>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。</p>\n<p>union  all  会将全部的数据直接合并在一起，union会对合并之后的数据去重。</p>\n<p><strong>子查询</strong></p>\n<h4 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h4><p>事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>\n<p><strong>查看&#x2F;设置事务提交方式</strong>\t\t<strong>selcet  @@autocommit;</strong>\t(显示1为自动提交，mysql默认为1&#x3D;自动)\t\t\t<strong>set  @@autocommit &#x3D; 0;</strong>  (设置为手动提交)</p>\n<p><strong>提交事务</strong>\t\t<strong>commit;</strong></p>\n<p><strong>回滚事务</strong>\t\t<strong>rollback;</strong></p>\n<p><strong>开启事务</strong>\t\t<strong>start  transacition</strong>    或   <strong>begin</strong></p>\n<p><strong>事务四大特性(ACID):</strong></p>\n<p><strong>原子性(Atomicity):</strong>\t\t事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</p>\n<p><strong>一致性(Consistency):</strong>\t\t事务完成时，必须使所有的数据都保持一致状态。</p>\n<p><strong>隔离性(Isolation):</strong>\t\t数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</p>\n<p><strong>持久性(Durability):</strong>\t\t事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</p>\n<p><strong>并发事务问题</strong></p>\n<p><strong>脏读</strong>\t\t\t\t\t一个事务读到另外一个事务还没有提交的数据。</p>\n<p>**不可重复读\t**\t一个事务先后读取同一条记录，但两次读取的数据不同。</p>\n<p><strong>幻读</strong>\t\t\t\t\t一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存 在，好像出现了‘幻影‘。</p>\n<p><strong>事务隔离级别</strong>\t\t\t\t\t\t\t\t\t\t\t                      脏读\t\t\t\t\t不可重复读\t\t\t\t\t\t幻读</p>\n<p><strong>Read uncommitted</strong>（读未提交）\t\t\t\t\t\t\t   √\t\t\t\t\t\t\t\t√\t\t\t\t\t\t\t\t\t√</p>\n<p><strong>Read committed</strong>（读已提交）\t\t\t\t\t\t\t\t\t×\t\t\t\t\t\t\t\t√\t\t\t\t\t\t\t\t\t√</p>\n<p><strong>Repeatable Read</strong>（可重复读）\t\t\t\t\t\t\t\t    ×\t\t\t\t\t\t\t\t×\t\t\t\t\t\t\t\t\t√</p>\n<p><strong>Serializable</strong>（序列化）\t\t\t\t\t\t\t\t\t\t\t      ×\t\t\t\t\t\t\t\t×\t\t\t\t\t\t\t\t\t ×</p>\n<p><strong>查看事务隔离级别</strong>\t\t\t<strong>select  @@transacition_isolation;</strong></p>\n<p><strong>设置事务隔离级别</strong>\t\t\t<strong>set  [session | global ]  transacition isolation level  {read uncommitted | read comitted | Repeatable Read | Serializable}</strong>   （事务级别关键字不区分大小写）</p>\n<p>事务隔离级别越高，数据越安全，但是性能越低。</p>\n"},{"title":"Python爬虫","date":"2022-10-17T01:56:14.000Z","cover":"https://qiansen.oss-cn-hangzhou.aliyuncs.com/Python爬虫.jpg","_content":"\n#### requests使用(第三方库)\n\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple requests\n\nimport  requests\n\n**get请求**\nrequests.get(url,params=data,headers=headers，proxies=proxies)\n定制参数\n参数使用params传递\n参数无需urlencode编码\n不需要请求对象的定制\n请求资源路径中？可加可不加\n\n**post请求**\nrequests.post(url = post_url,headers=headers,data=data，proxies=proxies)\n\n总结：\n\n（1）post请求 是不需要编解码的\n（2）post请求的参数是data\n（3）不需要请求对象的定制\n\n**get和post区别？**\n    1： get请求的参数名字是params post请求的参数的名字是data\n    2： 请求资源路径后面可以不加?\n    3： 不需要手动编解码\n    4： 不需要做请求对象的定制\n\n**请求方法请求服务器响应文件response的属性以及类型**\n    response.text : 获取网站源码\n    response.encoding ：访问或定制编码方式\n    response.url ：获取请求的url\n    response.content ：响应的字节类型\n    response.status_code ：响应的状态码\n    response.headers ：响应的头信息\n\n#### xpath使用(pycharm)\n\n 1.安装lxml库\n pip  install  ‐i  https://pypi.tsinghua.edu.cn/simple  lxml\n 2.导入lxml.etree\n from lxml import etree\n\n 3.etree.parse() 解析本地文件\n html_tree = etree.parse(‘XX.html’)\n 4.etree.HTML() 服务器响应文件\n html_tree = etree.HTML(response)\n 4.html_tree.xpath(xpath路径)\n\nxpath基本语法：\n1.路径查询\n    //：查找所有子孙节点，不考虑层级关系\n    / ：找直接子节点\n2.谓词查询\n    div是前面的路径\n    //div[@id]\n    //div[@id=\"maincontent\"]\n3.属性查询\n    //@class\t#查找名叫class的所有属性\n    如//title[@lang]：选取所有拥有名为 lang 的属性的 title 元素。\n    //title[@lang='eng']：选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。\n4.模糊查询\n    //div[contains(@id, \"he\")]\n    //div[starts‐with(@id, \"he\")]\n5.内容查询\n    //div/h1/text()\n6.逻辑运算\n    //div[@id=\"head\" and @class=\"s_down\"]\n    //title | //price\n\n#### 代理池\n\n代理池\n可以写一个代理池proxies_pool=[{}，{}]\t键值对中写代理IP\n用proxies = random.choice(proxies_pool)进行随机选择\n\n#### 读取的文件(图片、文本)保存\n\nwith  open(file_path,  选项参数)  as  f:\n\n​\tf.write(文本内容)\n\n选项参数决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。\n\n| 模式 | 描述                                                         |\n| :--- | ------------------------------------------------------------ |\n| r    | 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。 |\n| rb   | 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。 |\n| r+   | 打开一个文件用于读写。文件指针将会放在文件的开头。           |\n| rb+  | 以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。 |\n| w    | 打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。 |\n| wb   | 以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。 |\n| w+   | 打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。 |\n| wb+  | 以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。 |\n| a    | 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 |\n| ab   | 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 |\n| a+   | 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。 |\n| ab+  | 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。 |","source":"_posts/Python爬虫.md","raw":"---\ntitle: Python爬虫\ndate: 2022-10-17 09:56:14\ntags: 学习\ncover: https://qiansen.oss-cn-hangzhou.aliyuncs.com/Python爬虫.jpg\ncategory: 学习\n---\n\n#### requests使用(第三方库)\n\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple requests\n\nimport  requests\n\n**get请求**\nrequests.get(url,params=data,headers=headers，proxies=proxies)\n定制参数\n参数使用params传递\n参数无需urlencode编码\n不需要请求对象的定制\n请求资源路径中？可加可不加\n\n**post请求**\nrequests.post(url = post_url,headers=headers,data=data，proxies=proxies)\n\n总结：\n\n（1）post请求 是不需要编解码的\n（2）post请求的参数是data\n（3）不需要请求对象的定制\n\n**get和post区别？**\n    1： get请求的参数名字是params post请求的参数的名字是data\n    2： 请求资源路径后面可以不加?\n    3： 不需要手动编解码\n    4： 不需要做请求对象的定制\n\n**请求方法请求服务器响应文件response的属性以及类型**\n    response.text : 获取网站源码\n    response.encoding ：访问或定制编码方式\n    response.url ：获取请求的url\n    response.content ：响应的字节类型\n    response.status_code ：响应的状态码\n    response.headers ：响应的头信息\n\n#### xpath使用(pycharm)\n\n 1.安装lxml库\n pip  install  ‐i  https://pypi.tsinghua.edu.cn/simple  lxml\n 2.导入lxml.etree\n from lxml import etree\n\n 3.etree.parse() 解析本地文件\n html_tree = etree.parse(‘XX.html’)\n 4.etree.HTML() 服务器响应文件\n html_tree = etree.HTML(response)\n 4.html_tree.xpath(xpath路径)\n\nxpath基本语法：\n1.路径查询\n    //：查找所有子孙节点，不考虑层级关系\n    / ：找直接子节点\n2.谓词查询\n    div是前面的路径\n    //div[@id]\n    //div[@id=\"maincontent\"]\n3.属性查询\n    //@class\t#查找名叫class的所有属性\n    如//title[@lang]：选取所有拥有名为 lang 的属性的 title 元素。\n    //title[@lang='eng']：选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。\n4.模糊查询\n    //div[contains(@id, \"he\")]\n    //div[starts‐with(@id, \"he\")]\n5.内容查询\n    //div/h1/text()\n6.逻辑运算\n    //div[@id=\"head\" and @class=\"s_down\"]\n    //title | //price\n\n#### 代理池\n\n代理池\n可以写一个代理池proxies_pool=[{}，{}]\t键值对中写代理IP\n用proxies = random.choice(proxies_pool)进行随机选择\n\n#### 读取的文件(图片、文本)保存\n\nwith  open(file_path,  选项参数)  as  f:\n\n​\tf.write(文本内容)\n\n选项参数决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。\n\n| 模式 | 描述                                                         |\n| :--- | ------------------------------------------------------------ |\n| r    | 以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。 |\n| rb   | 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。 |\n| r+   | 打开一个文件用于读写。文件指针将会放在文件的开头。           |\n| rb+  | 以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。 |\n| w    | 打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。 |\n| wb   | 以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。 |\n| w+   | 打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。 |\n| wb+  | 以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。 |\n| a    | 打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 |\n| ab   | 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。 |\n| a+   | 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。 |\n| ab+  | 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。 |","slug":"Python爬虫","published":1,"updated":"2022-11-10T14:50:54.575Z","_id":"cl9cegjcn0001uow17ldz3x8g","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"requests使用-第三方库\"><a href=\"#requests使用-第三方库\" class=\"headerlink\" title=\"requests使用(第三方库)\"></a>requests使用(第三方库)</h4><p>pip install -i <a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\">https://pypi.tuna.tsinghua.edu.cn/simple</a> requests</p>\n<p>import  requests</p>\n<p><strong>get请求</strong><br>requests.get(url,params&#x3D;data,headers&#x3D;headers，proxies&#x3D;proxies)<br>定制参数<br>参数使用params传递<br>参数无需urlencode编码<br>不需要请求对象的定制<br>请求资源路径中？可加可不加</p>\n<p><strong>post请求</strong><br>requests.post(url &#x3D; post_url,headers&#x3D;headers,data&#x3D;data，proxies&#x3D;proxies)</p>\n<p>总结：</p>\n<p>（1）post请求 是不需要编解码的<br>（2）post请求的参数是data<br>（3）不需要请求对象的定制</p>\n<p><strong>get和post区别？</strong><br>    1： get请求的参数名字是params post请求的参数的名字是data<br>    2： 请求资源路径后面可以不加?<br>    3： 不需要手动编解码<br>    4： 不需要做请求对象的定制</p>\n<p><strong>请求方法请求服务器响应文件response的属性以及类型</strong><br>    response.text : 获取网站源码<br>    response.encoding ：访问或定制编码方式<br>    response.url ：获取请求的url<br>    response.content ：响应的字节类型<br>    response.status_code ：响应的状态码<br>    response.headers ：响应的头信息</p>\n<h4 id=\"xpath使用-pycharm\"><a href=\"#xpath使用-pycharm\" class=\"headerlink\" title=\"xpath使用(pycharm)\"></a>xpath使用(pycharm)</h4><p> 1.安装lxml库<br> pip  install  ‐i  <a href=\"https://pypi.tsinghua.edu.cn/simple\">https://pypi.tsinghua.edu.cn/simple</a>  lxml<br> 2.导入lxml.etree<br> from lxml import etree</p>\n<p> 3.etree.parse() 解析本地文件<br> html_tree &#x3D; etree.parse(‘XX.html’)<br> 4.etree.HTML() 服务器响应文件<br> html_tree &#x3D; etree.HTML(response)<br> 4.html_tree.xpath(xpath路径)</p>\n<p>xpath基本语法：<br>1.路径查询<br>    &#x2F;&#x2F;：查找所有子孙节点，不考虑层级关系<br>    &#x2F; ：找直接子节点<br>2.谓词查询<br>    div是前面的路径<br>    &#x2F;&#x2F;div[@id]<br>    &#x2F;&#x2F;div[@id&#x3D;”maincontent”]<br>3.属性查询<br>    &#x2F;&#x2F;@class\t#查找名叫class的所有属性<br>    如&#x2F;&#x2F;title[@lang]：选取所有拥有名为 lang 的属性的 title 元素。<br>    &#x2F;&#x2F;title[@lang&#x3D;’eng’]：选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。<br>4.模糊查询<br>    &#x2F;&#x2F;div[contains(@id, “he”)]<br>    &#x2F;&#x2F;div[starts‐with(@id, “he”)]<br>5.内容查询<br>    &#x2F;&#x2F;div&#x2F;h1&#x2F;text()<br>6.逻辑运算<br>    &#x2F;&#x2F;div[@id&#x3D;”head” and @class&#x3D;”s_down”]<br>    &#x2F;&#x2F;title | &#x2F;&#x2F;price</p>\n<h4 id=\"代理池\"><a href=\"#代理池\" class=\"headerlink\" title=\"代理池\"></a>代理池</h4><p>代理池<br>可以写一个代理池proxies_pool&#x3D;[{}，{}]\t键值对中写代理IP<br>用proxies &#x3D; random.choice(proxies_pool)进行随机选择</p>\n<h4 id=\"读取的文件-图片、文本-保存\"><a href=\"#读取的文件-图片、文本-保存\" class=\"headerlink\" title=\"读取的文件(图片、文本)保存\"></a>读取的文件(图片、文本)保存</h4><p>with  open(file_path,  选项参数)  as  f:</p>\n<p>​\tf.write(文本内容)</p>\n<p>选项参数决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">模式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">r</td>\n<td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>\n</tr>\n<tr>\n<td align=\"left\">rb</td>\n<td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td>\n</tr>\n<tr>\n<td align=\"left\">r+</td>\n<td>打开一个文件用于读写。文件指针将会放在文件的开头。</td>\n</tr>\n<tr>\n<td align=\"left\">rb+</td>\n<td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td>\n</tr>\n<tr>\n<td align=\"left\">w</td>\n<td>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>\n</tr>\n<tr>\n<td align=\"left\">wb</td>\n<td>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>\n</tr>\n<tr>\n<td align=\"left\">w+</td>\n<td>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>\n</tr>\n<tr>\n<td align=\"left\">wb+</td>\n<td>以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>\n</tr>\n<tr>\n<td align=\"left\">ab</td>\n<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>\n</tr>\n<tr>\n<td align=\"left\">a+</td>\n<td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>\n</tr>\n<tr>\n<td align=\"left\">ab+</td>\n<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>\n</tr>\n</tbody></table>\n","site":{"data":{"links":[{"name":"yixin","link":"https://blog.yixinfangfa.top/","description":"","avatar":""},{"name":"GiriNeko的猫窝","link":" https://ineko.cc/","description":"一头会说话的咸鱼","avatar":"https://static.ineko.cc/images/favicon.png"}]}},"excerpt":"","more":"<h4 id=\"requests使用-第三方库\"><a href=\"#requests使用-第三方库\" class=\"headerlink\" title=\"requests使用(第三方库)\"></a>requests使用(第三方库)</h4><p>pip install -i <a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\">https://pypi.tuna.tsinghua.edu.cn/simple</a> requests</p>\n<p>import  requests</p>\n<p><strong>get请求</strong><br>requests.get(url,params&#x3D;data,headers&#x3D;headers，proxies&#x3D;proxies)<br>定制参数<br>参数使用params传递<br>参数无需urlencode编码<br>不需要请求对象的定制<br>请求资源路径中？可加可不加</p>\n<p><strong>post请求</strong><br>requests.post(url &#x3D; post_url,headers&#x3D;headers,data&#x3D;data，proxies&#x3D;proxies)</p>\n<p>总结：</p>\n<p>（1）post请求 是不需要编解码的<br>（2）post请求的参数是data<br>（3）不需要请求对象的定制</p>\n<p><strong>get和post区别？</strong><br>    1： get请求的参数名字是params post请求的参数的名字是data<br>    2： 请求资源路径后面可以不加?<br>    3： 不需要手动编解码<br>    4： 不需要做请求对象的定制</p>\n<p><strong>请求方法请求服务器响应文件response的属性以及类型</strong><br>    response.text : 获取网站源码<br>    response.encoding ：访问或定制编码方式<br>    response.url ：获取请求的url<br>    response.content ：响应的字节类型<br>    response.status_code ：响应的状态码<br>    response.headers ：响应的头信息</p>\n<h4 id=\"xpath使用-pycharm\"><a href=\"#xpath使用-pycharm\" class=\"headerlink\" title=\"xpath使用(pycharm)\"></a>xpath使用(pycharm)</h4><p> 1.安装lxml库<br> pip  install  ‐i  <a href=\"https://pypi.tsinghua.edu.cn/simple\">https://pypi.tsinghua.edu.cn/simple</a>  lxml<br> 2.导入lxml.etree<br> from lxml import etree</p>\n<p> 3.etree.parse() 解析本地文件<br> html_tree &#x3D; etree.parse(‘XX.html’)<br> 4.etree.HTML() 服务器响应文件<br> html_tree &#x3D; etree.HTML(response)<br> 4.html_tree.xpath(xpath路径)</p>\n<p>xpath基本语法：<br>1.路径查询<br>    &#x2F;&#x2F;：查找所有子孙节点，不考虑层级关系<br>    &#x2F; ：找直接子节点<br>2.谓词查询<br>    div是前面的路径<br>    &#x2F;&#x2F;div[@id]<br>    &#x2F;&#x2F;div[@id&#x3D;”maincontent”]<br>3.属性查询<br>    &#x2F;&#x2F;@class\t#查找名叫class的所有属性<br>    如&#x2F;&#x2F;title[@lang]：选取所有拥有名为 lang 的属性的 title 元素。<br>    &#x2F;&#x2F;title[@lang&#x3D;’eng’]：选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。<br>4.模糊查询<br>    &#x2F;&#x2F;div[contains(@id, “he”)]<br>    &#x2F;&#x2F;div[starts‐with(@id, “he”)]<br>5.内容查询<br>    &#x2F;&#x2F;div&#x2F;h1&#x2F;text()<br>6.逻辑运算<br>    &#x2F;&#x2F;div[@id&#x3D;”head” and @class&#x3D;”s_down”]<br>    &#x2F;&#x2F;title | &#x2F;&#x2F;price</p>\n<h4 id=\"代理池\"><a href=\"#代理池\" class=\"headerlink\" title=\"代理池\"></a>代理池</h4><p>代理池<br>可以写一个代理池proxies_pool&#x3D;[{}，{}]\t键值对中写代理IP<br>用proxies &#x3D; random.choice(proxies_pool)进行随机选择</p>\n<h4 id=\"读取的文件-图片、文本-保存\"><a href=\"#读取的文件-图片、文本-保存\" class=\"headerlink\" title=\"读取的文件(图片、文本)保存\"></a>读取的文件(图片、文本)保存</h4><p>with  open(file_path,  选项参数)  as  f:</p>\n<p>​\tf.write(文本内容)</p>\n<p>选项参数决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">模式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">r</td>\n<td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>\n</tr>\n<tr>\n<td align=\"left\">rb</td>\n<td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td>\n</tr>\n<tr>\n<td align=\"left\">r+</td>\n<td>打开一个文件用于读写。文件指针将会放在文件的开头。</td>\n</tr>\n<tr>\n<td align=\"left\">rb+</td>\n<td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td>\n</tr>\n<tr>\n<td align=\"left\">w</td>\n<td>打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>\n</tr>\n<tr>\n<td align=\"left\">wb</td>\n<td>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>\n</tr>\n<tr>\n<td align=\"left\">w+</td>\n<td>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>\n</tr>\n<tr>\n<td align=\"left\">wb+</td>\n<td>以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>\n</tr>\n<tr>\n<td align=\"left\">ab</td>\n<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>\n</tr>\n<tr>\n<td align=\"left\">a+</td>\n<td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>\n</tr>\n<tr>\n<td align=\"left\">ab+</td>\n<td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>\n</tr>\n</tbody></table>\n"},{"title":"hadoop大数据","date":"2022-10-17T06:19:48.000Z","cover":"https://qiansen.oss-cn-hangzhou.aliyuncs.com/幼.jpg","_content":"\n","source":"_posts/hadoop大数据.md","raw":"---\ntitle: hadoop大数据\ndate: 2022-10-17 14:19:48\ntags: 学习\ncategory: 学习\ncover: https://qiansen.oss-cn-hangzhou.aliyuncs.com/幼.jpg\n---\n\n","slug":"hadoop大数据","published":1,"updated":"2022-10-21T12:12:46.211Z","_id":"cl9cegjcu0004uow16od49zxj","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{"links":[{"name":"yixin","link":"https://blog.yixinfangfa.top/","description":"","avatar":""},{"name":"GiriNeko的猫窝","link":" https://ineko.cc/","description":"一头会说话的咸鱼","avatar":"https://static.ineko.cc/images/favicon.png"}]}},"excerpt":"","more":""},{"title":"hive数据仓库","date":"2022-10-10T14:04:29.000Z","cover":"https://qiansen.oss-cn-hangzhou.aliyuncs.com/hive数据仓库.jpg","_content":"\n#### 元数据\n\n元数据是描述数据仓库内数据的结构和建立方法的数据。和表中数据没有任何关系，反应的是表本身的信息。Hive中的元数据包括表名、表所属的数据仓库、表的所有者、列/分区字段、表的类型(是否为外部表)、表的数据所在目录等。\n\n#### 数据类型\n\n基本数值类型、布尔类型、字符串类型、时间戳类型等。复杂数据类型包括数组(Array)类型、映射(Map)类型和结构体(Struct)类型。\n\nTInyint(1字节)、Smallint(2字节)、Int(4字节)、Bigint(8字节)、Boolean(布尔类型)、Float(单精度浮点数)、Double(双精度浮点数)、Decimal(任意精度)、String、Varchar、Char(定长)、Date(日期，年月日)、TimeStamp(时间戳)、BInary(字节数组)\n\n#### HIve表存储格式\n\n行式存储：所有字段的一条数据为一块。即一行。TextFile(默认)、SequenceFile\n\n列式存储：一个字段的所有数据为一块。即一列。ORC、Parquet(压缩最狠)\n\n#### 数据仓库语法\n\n创建\t**create  database  [if not exists]  dataname  location  direction**;\t数据仓库默认存储路径/usr/hive/warehouse/\n\n删除\t**drop  database  [if  exists]  database_name  [cascade]  ;**\tcascade强制删除\n\n查询当前数据仓库\t**select  current_database();**\n\n显示数据仓库\t**show  databases;**\n\n显示数据仓库详细信息\t**desc  database  extended  database_name;**\n\n切换\t**use  database_name;**\n\n修改\t**alter  database  database_name set  dbproperties(key,value);**\t数据仓库的Dbproperties键值对属性值可修。其他元数据信息不可更改。\n\n#### 建表语法树\n\n**create  [external]  table  [if  not  exists]  table_name**\n\n**(col_name  data_type  [comment  col_comment],......)**\n\n**[comment  table_comment]**\n\n**[partitioned  by  (col_name  data_type  [comment  col_comment],......)]**\n\n**[clustered  by  (col_name,col_name,......)  into  num_buckets  buckets]**\n\n**[sorted  by  (col_name  [ASC|DESC],......)]**\n\n**[row  format  delimited  row_format]**\n\n**[stored  as  file_format]**\n\n**[location  hdfs_path]**","source":"_posts/hive数据仓库.md","raw":"---\ntitle: hive数据仓库\ndate: 2022-10-10 22:04:29\ntags: 学习\ncategory: 学习\ncover: https://qiansen.oss-cn-hangzhou.aliyuncs.com/hive数据仓库.jpg\n---\n\n#### 元数据\n\n元数据是描述数据仓库内数据的结构和建立方法的数据。和表中数据没有任何关系，反应的是表本身的信息。Hive中的元数据包括表名、表所属的数据仓库、表的所有者、列/分区字段、表的类型(是否为外部表)、表的数据所在目录等。\n\n#### 数据类型\n\n基本数值类型、布尔类型、字符串类型、时间戳类型等。复杂数据类型包括数组(Array)类型、映射(Map)类型和结构体(Struct)类型。\n\nTInyint(1字节)、Smallint(2字节)、Int(4字节)、Bigint(8字节)、Boolean(布尔类型)、Float(单精度浮点数)、Double(双精度浮点数)、Decimal(任意精度)、String、Varchar、Char(定长)、Date(日期，年月日)、TimeStamp(时间戳)、BInary(字节数组)\n\n#### HIve表存储格式\n\n行式存储：所有字段的一条数据为一块。即一行。TextFile(默认)、SequenceFile\n\n列式存储：一个字段的所有数据为一块。即一列。ORC、Parquet(压缩最狠)\n\n#### 数据仓库语法\n\n创建\t**create  database  [if not exists]  dataname  location  direction**;\t数据仓库默认存储路径/usr/hive/warehouse/\n\n删除\t**drop  database  [if  exists]  database_name  [cascade]  ;**\tcascade强制删除\n\n查询当前数据仓库\t**select  current_database();**\n\n显示数据仓库\t**show  databases;**\n\n显示数据仓库详细信息\t**desc  database  extended  database_name;**\n\n切换\t**use  database_name;**\n\n修改\t**alter  database  database_name set  dbproperties(key,value);**\t数据仓库的Dbproperties键值对属性值可修。其他元数据信息不可更改。\n\n#### 建表语法树\n\n**create  [external]  table  [if  not  exists]  table_name**\n\n**(col_name  data_type  [comment  col_comment],......)**\n\n**[comment  table_comment]**\n\n**[partitioned  by  (col_name  data_type  [comment  col_comment],......)]**\n\n**[clustered  by  (col_name,col_name,......)  into  num_buckets  buckets]**\n\n**[sorted  by  (col_name  [ASC|DESC],......)]**\n\n**[row  format  delimited  row_format]**\n\n**[stored  as  file_format]**\n\n**[location  hdfs_path]**","slug":"hive数据仓库","published":1,"updated":"2022-11-10T14:50:54.573Z","_id":"cl9co32mr0000nww11kin9eme","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h4><p>元数据是描述数据仓库内数据的结构和建立方法的数据。和表中数据没有任何关系，反应的是表本身的信息。Hive中的元数据包括表名、表所属的数据仓库、表的所有者、列&#x2F;分区字段、表的类型(是否为外部表)、表的数据所在目录等。</p>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>基本数值类型、布尔类型、字符串类型、时间戳类型等。复杂数据类型包括数组(Array)类型、映射(Map)类型和结构体(Struct)类型。</p>\n<p>TInyint(1字节)、Smallint(2字节)、Int(4字节)、Bigint(8字节)、Boolean(布尔类型)、Float(单精度浮点数)、Double(双精度浮点数)、Decimal(任意精度)、String、Varchar、Char(定长)、Date(日期，年月日)、TimeStamp(时间戳)、BInary(字节数组)</p>\n<h4 id=\"HIve表存储格式\"><a href=\"#HIve表存储格式\" class=\"headerlink\" title=\"HIve表存储格式\"></a>HIve表存储格式</h4><p>行式存储：所有字段的一条数据为一块。即一行。TextFile(默认)、SequenceFile</p>\n<p>列式存储：一个字段的所有数据为一块。即一列。ORC、Parquet(压缩最狠)</p>\n<h4 id=\"数据仓库语法\"><a href=\"#数据仓库语法\" class=\"headerlink\" title=\"数据仓库语法\"></a>数据仓库语法</h4><p>创建\t<strong>create  database  [if not exists]  dataname  location  direction</strong>;\t数据仓库默认存储路径&#x2F;usr&#x2F;hive&#x2F;warehouse&#x2F;</p>\n<p>删除\t<strong>drop  database  [if  exists]  database_name  [cascade]  ;</strong>\tcascade强制删除</p>\n<p>查询当前数据仓库\t<strong>select  current_database();</strong></p>\n<p>显示数据仓库\t<strong>show  databases;</strong></p>\n<p>显示数据仓库详细信息\t<strong>desc  database  extended  database_name;</strong></p>\n<p>切换\t<strong>use  database_name;</strong></p>\n<p>修改\t<strong>alter  database  database_name set  dbproperties(key,value);</strong>\t数据仓库的Dbproperties键值对属性值可修。其他元数据信息不可更改。</p>\n<h4 id=\"建表语法树\"><a href=\"#建表语法树\" class=\"headerlink\" title=\"建表语法树\"></a>建表语法树</h4><p><strong>create  [external]  table  [if  not  exists]  table_name</strong></p>\n<p><strong>(col_name  data_type  [comment  col_comment],……)</strong></p>\n<p><strong>[comment  table_comment]</strong></p>\n<p><strong>[partitioned  by  (col_name  data_type  [comment  col_comment],……)]</strong></p>\n<p><strong>[clustered  by  (col_name,col_name,……)  into  num_buckets  buckets]</strong></p>\n<p><strong>[sorted  by  (col_name  [ASC|DESC],……)]</strong></p>\n<p><strong>[row  format  delimited  row_format]</strong></p>\n<p><strong>[stored  as  file_format]</strong></p>\n<p><strong>[location  hdfs_path]</strong></p>\n","site":{"data":{"links":[{"name":"yixin","link":"https://blog.yixinfangfa.top/","description":"","avatar":""},{"name":"GiriNeko的猫窝","link":" https://ineko.cc/","description":"一头会说话的咸鱼","avatar":"https://static.ineko.cc/images/favicon.png"}]}},"excerpt":"","more":"<h4 id=\"元数据\"><a href=\"#元数据\" class=\"headerlink\" title=\"元数据\"></a>元数据</h4><p>元数据是描述数据仓库内数据的结构和建立方法的数据。和表中数据没有任何关系，反应的是表本身的信息。Hive中的元数据包括表名、表所属的数据仓库、表的所有者、列&#x2F;分区字段、表的类型(是否为外部表)、表的数据所在目录等。</p>\n<h4 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h4><p>基本数值类型、布尔类型、字符串类型、时间戳类型等。复杂数据类型包括数组(Array)类型、映射(Map)类型和结构体(Struct)类型。</p>\n<p>TInyint(1字节)、Smallint(2字节)、Int(4字节)、Bigint(8字节)、Boolean(布尔类型)、Float(单精度浮点数)、Double(双精度浮点数)、Decimal(任意精度)、String、Varchar、Char(定长)、Date(日期，年月日)、TimeStamp(时间戳)、BInary(字节数组)</p>\n<h4 id=\"HIve表存储格式\"><a href=\"#HIve表存储格式\" class=\"headerlink\" title=\"HIve表存储格式\"></a>HIve表存储格式</h4><p>行式存储：所有字段的一条数据为一块。即一行。TextFile(默认)、SequenceFile</p>\n<p>列式存储：一个字段的所有数据为一块。即一列。ORC、Parquet(压缩最狠)</p>\n<h4 id=\"数据仓库语法\"><a href=\"#数据仓库语法\" class=\"headerlink\" title=\"数据仓库语法\"></a>数据仓库语法</h4><p>创建\t<strong>create  database  [if not exists]  dataname  location  direction</strong>;\t数据仓库默认存储路径&#x2F;usr&#x2F;hive&#x2F;warehouse&#x2F;</p>\n<p>删除\t<strong>drop  database  [if  exists]  database_name  [cascade]  ;</strong>\tcascade强制删除</p>\n<p>查询当前数据仓库\t<strong>select  current_database();</strong></p>\n<p>显示数据仓库\t<strong>show  databases;</strong></p>\n<p>显示数据仓库详细信息\t<strong>desc  database  extended  database_name;</strong></p>\n<p>切换\t<strong>use  database_name;</strong></p>\n<p>修改\t<strong>alter  database  database_name set  dbproperties(key,value);</strong>\t数据仓库的Dbproperties键值对属性值可修。其他元数据信息不可更改。</p>\n<h4 id=\"建表语法树\"><a href=\"#建表语法树\" class=\"headerlink\" title=\"建表语法树\"></a>建表语法树</h4><p><strong>create  [external]  table  [if  not  exists]  table_name</strong></p>\n<p><strong>(col_name  data_type  [comment  col_comment],……)</strong></p>\n<p><strong>[comment  table_comment]</strong></p>\n<p><strong>[partitioned  by  (col_name  data_type  [comment  col_comment],……)]</strong></p>\n<p><strong>[clustered  by  (col_name,col_name,……)  into  num_buckets  buckets]</strong></p>\n<p><strong>[sorted  by  (col_name  [ASC|DESC],……)]</strong></p>\n<p><strong>[row  format  delimited  row_format]</strong></p>\n<p><strong>[stored  as  file_format]</strong></p>\n<p><strong>[location  hdfs_path]</strong></p>\n"},{"title":"Hadoop安装","date":"2022-10-21T12:12:04.000Z","cover":"https://qiansen.oss-cn-hangzhou.aliyuncs.com/Hadoop安装.jpg","_content":"\n### hadoop分布式集群安装\n\n**需下载**\n\nhadoop-3.3.4.tar.gz\t\t\tjdk-8u333-linux-x64.rpm   版本自己选择\n\n**安装虚拟机 **  \n\n**规划节点和IP地址（win+R cmd  ipconfig 查看VMnet8ip地址(我用的)把最后一个点后面改成自己想改的3个连续数字）**\nnode1 192.168.2.80 NN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnode2 192.168.2.81 DN\nnode3 192.168.2.82 SN\n\n**虚拟机设置管理员（安装CentOS7步骤里会有）(下面用户名均用user代替)**\n用户名：自己设\n密码：自己设\n\n使用MobaXtem连接192.168.2.80（如果连接不上需要打开控制面板->网络和Internet->网络和共享中心->更改适配器设置->启用两个以太网VMware）（可以不用远程连接工具，只是为了方便上传文件）\n**安装基础工具 **\nsudo yum install net-tools\nsudo yum install vim\n\n在user的~目录下新建文件夹 mkdir software，修改权限 chmod -R 777 software\n将Hadoop和jdk安装包放到soft文件夹下，注意，Java版本要求Java8及以下\n\n使用sudo rpm -ivh jdk-8u333-linux-x64.rpm 命令安装jdk包，\n使用sudo tar -zxvf hadoop-3.3.4.tar.gz -C /usr/ 将Hadoop解压到/usr目录下\n使用sudo chown -R user:user /usr/hadoop-3.3.4/将hadoop-3.3.4改为user用户组的user用户\n\n**关闭防火墙（如果不关闭可能出现节点间无法通信的情况）**\nsudo systemctl stop firewalld.service （停止防火墙）\nsudo systemctl disable firewalld.service （彻底关闭防火墙）\n\n**关闭selinux（防止传输文件时出问题）**\nsudo vim /etc/selinux/config\n修改为 SELINUX=disabled\n\n**添加hadoop环境变量**\n\n把hdfs命令直接加到环境变量中，这样在任意地方执行hdfs命令都可以，不需要在进入hadoop-3.3.4/bin目录下执行，也可以直接在/etc/profile里改，但为了方便维护，就直接在profile.d文件夹下新增一个.sh文件hdfs.sh，如果后期不想要这个命令，可直接删除hdfs.sh文件hdfs\n新增一个sh文件sudo vim /etc/profile.d/hdfs.sh，填入如下内容：\nexport HADOOP_HOME=/usr/hadoop-3.3.4\nexport PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin\n重启profile：source /etc/profile  （相当于重启了source，让hdfs.sh被激活，起作用）\n\n**java环境变量配置:**\nexport JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.345.b01-1.el7_9.x86_64（这填自己的java安装目录）\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n\nwhereis java（寻找java安装目录）\nls -lrt /usr/bin/java\nls -lrt /etc/alternatives/java\n\n/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.345.b01-1.el7_9.x86_64/jre/bin(我的java安装目录)\n\n找不到，详情可以看[ Centos7 bash：jps：未找到命令](https://blog.csdn.net/baidu32552365/article/details/108716966)\n\n**创建HDFS的NN和DN工作主目录:**\nsudo mkdir /var/big_data\nsudo chown -R user:user /var/big_data\n\n**配置Hadoop（一般.sh文件都是寻找Java运行环境，因此主要配置JAVA_HOME）**\n进入 cd /usr/hadoop-3.3.4/etc/hadoop 目录下\nsudo vim hadoop-env.sh\n修改export JAVA_HOME=/usr/java/default\n\n**为Yarn任务、资源管理器提供Java运行环境（hadoop-3.3.4无需配置）**\nvim yarn-env.sh\nexport JAVA_HOME=/usr/java/default\n\n**配置HDFS主节点信息、持久化和数据文件的主目录（如果tab不是4个空格，改一下sudo vim /etc/vimrc，添加set ts=4）**\n        vim core-site.xml在<configuration>中添加如下配置\n\t<property>\n\t\t<name>fs.defaultFS</name>\n\t\t<value>hdfs://node1:9000</value>\n\t</property>\n\t<property>\n\t\t<name>hadoop.tmp.dir</name>\n\t\t<value>/var/big_data</value>\n\t</property>\n\n**配置HDFS默认的数据存放策略**\n        vim hdfs-site.xml\n\t<property>\n\t\t<name>dfs.replication</name>\n\t\t<value>2</value>\n\t</property>\n\t<property>\n\t\t<name>dfs.namenode.secondary.http-address</name>\n\t\t<value>node3:9868</value>\n\t</property>\n\t<property>\n\t\t<name>hadoop.proxyuser.user.hosts</name>\n\t\t<value>*</value>\n\t</property>\n\t<property>\n\t\t<name>hadoop.proxyuser.user.groups</name>\n\t\t<value>*</value>\n\t</property>\n\n**配置mapreduce任务调度策略**\n        vim mapred-site.xml \n\t<property>\n\t\t<name>mapreduce.framework.name</name>\n\t\t<value>yarn</value>\n\t</property>\n\t\t\t\n**配置Yarn资源管理角色的信息**\n        vim yarn-site.xml\n\t<property>\n\t\t<name>yarn.nodemanager.aux-services</name>\n\t\t<value>mapreduce_shuffle</value>\n\t</property>\n\t<property>\n\t\t<name>yarn.resourcemanager.hostname</name>\n\t\t<value>node1</value>\n\t</property>\n\t\t\t\n**配置datanode节点信息**\n        vim slaves\nnode1\nnode2\nnode3\n\t\t\t\n**提前准备主机名解析文件，为后面的克隆机器做好准备（可选，若不做，克隆后为每台机器重新添加亦可）**\n    sudo vim /etc/hosts\n192.168.33.80  node1\n192.168.33.81  node2\n192.168.33.82  node3\n\t\t\n**重启 sudo reboot**\n\n**克隆其他集群信息**\n    关闭机器，准备克隆\n    克隆后，修改node2、node3的IP和主机名\n    修改主机名sudo vim /etc/hostname \n    修改IP:sudo vim /etc/sysconfig/network-scripts/ifcfg-ens33 \n    然后重启：sudo reboot\n\t\n**下面开始配置集群的ssh免密\n    在3台机器上执行产生自己的公钥：**\n        ssh-keygen -t rsa\n    按照默认值回车确定\n    将每台机器的公钥拷贝给每台机器，注意下面的指令要求3台机器都要执行：\n        ssh-copy-id node1\n        ssh-copy-id node2\n        ssh-copy-id node3\n\t\t\n**格式化hdfs**\n    hdfs namenode -format\n\n**开启集群测试**\nstart-dfs.sh\n\nHadoop3的web端访问端口为9870","source":"_posts/Hadoop安装.md","raw":"---\ntitle: Hadoop安装\ndate: 2022-10-21 20:12:04\ntags: 学习\ncategory: 学习\ncover: https://qiansen.oss-cn-hangzhou.aliyuncs.com/Hadoop安装.jpg\n---\n\n### hadoop分布式集群安装\n\n**需下载**\n\nhadoop-3.3.4.tar.gz\t\t\tjdk-8u333-linux-x64.rpm   版本自己选择\n\n**安装虚拟机 **  \n\n**规划节点和IP地址（win+R cmd  ipconfig 查看VMnet8ip地址(我用的)把最后一个点后面改成自己想改的3个连续数字）**\nnode1 192.168.2.80 NN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnode2 192.168.2.81 DN\nnode3 192.168.2.82 SN\n\n**虚拟机设置管理员（安装CentOS7步骤里会有）(下面用户名均用user代替)**\n用户名：自己设\n密码：自己设\n\n使用MobaXtem连接192.168.2.80（如果连接不上需要打开控制面板->网络和Internet->网络和共享中心->更改适配器设置->启用两个以太网VMware）（可以不用远程连接工具，只是为了方便上传文件）\n**安装基础工具 **\nsudo yum install net-tools\nsudo yum install vim\n\n在user的~目录下新建文件夹 mkdir software，修改权限 chmod -R 777 software\n将Hadoop和jdk安装包放到soft文件夹下，注意，Java版本要求Java8及以下\n\n使用sudo rpm -ivh jdk-8u333-linux-x64.rpm 命令安装jdk包，\n使用sudo tar -zxvf hadoop-3.3.4.tar.gz -C /usr/ 将Hadoop解压到/usr目录下\n使用sudo chown -R user:user /usr/hadoop-3.3.4/将hadoop-3.3.4改为user用户组的user用户\n\n**关闭防火墙（如果不关闭可能出现节点间无法通信的情况）**\nsudo systemctl stop firewalld.service （停止防火墙）\nsudo systemctl disable firewalld.service （彻底关闭防火墙）\n\n**关闭selinux（防止传输文件时出问题）**\nsudo vim /etc/selinux/config\n修改为 SELINUX=disabled\n\n**添加hadoop环境变量**\n\n把hdfs命令直接加到环境变量中，这样在任意地方执行hdfs命令都可以，不需要在进入hadoop-3.3.4/bin目录下执行，也可以直接在/etc/profile里改，但为了方便维护，就直接在profile.d文件夹下新增一个.sh文件hdfs.sh，如果后期不想要这个命令，可直接删除hdfs.sh文件hdfs\n新增一个sh文件sudo vim /etc/profile.d/hdfs.sh，填入如下内容：\nexport HADOOP_HOME=/usr/hadoop-3.3.4\nexport PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin\n重启profile：source /etc/profile  （相当于重启了source，让hdfs.sh被激活，起作用）\n\n**java环境变量配置:**\nexport JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.345.b01-1.el7_9.x86_64（这填自己的java安装目录）\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n\nwhereis java（寻找java安装目录）\nls -lrt /usr/bin/java\nls -lrt /etc/alternatives/java\n\n/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.345.b01-1.el7_9.x86_64/jre/bin(我的java安装目录)\n\n找不到，详情可以看[ Centos7 bash：jps：未找到命令](https://blog.csdn.net/baidu32552365/article/details/108716966)\n\n**创建HDFS的NN和DN工作主目录:**\nsudo mkdir /var/big_data\nsudo chown -R user:user /var/big_data\n\n**配置Hadoop（一般.sh文件都是寻找Java运行环境，因此主要配置JAVA_HOME）**\n进入 cd /usr/hadoop-3.3.4/etc/hadoop 目录下\nsudo vim hadoop-env.sh\n修改export JAVA_HOME=/usr/java/default\n\n**为Yarn任务、资源管理器提供Java运行环境（hadoop-3.3.4无需配置）**\nvim yarn-env.sh\nexport JAVA_HOME=/usr/java/default\n\n**配置HDFS主节点信息、持久化和数据文件的主目录（如果tab不是4个空格，改一下sudo vim /etc/vimrc，添加set ts=4）**\n        vim core-site.xml在<configuration>中添加如下配置\n\t<property>\n\t\t<name>fs.defaultFS</name>\n\t\t<value>hdfs://node1:9000</value>\n\t</property>\n\t<property>\n\t\t<name>hadoop.tmp.dir</name>\n\t\t<value>/var/big_data</value>\n\t</property>\n\n**配置HDFS默认的数据存放策略**\n        vim hdfs-site.xml\n\t<property>\n\t\t<name>dfs.replication</name>\n\t\t<value>2</value>\n\t</property>\n\t<property>\n\t\t<name>dfs.namenode.secondary.http-address</name>\n\t\t<value>node3:9868</value>\n\t</property>\n\t<property>\n\t\t<name>hadoop.proxyuser.user.hosts</name>\n\t\t<value>*</value>\n\t</property>\n\t<property>\n\t\t<name>hadoop.proxyuser.user.groups</name>\n\t\t<value>*</value>\n\t</property>\n\n**配置mapreduce任务调度策略**\n        vim mapred-site.xml \n\t<property>\n\t\t<name>mapreduce.framework.name</name>\n\t\t<value>yarn</value>\n\t</property>\n\t\t\t\n**配置Yarn资源管理角色的信息**\n        vim yarn-site.xml\n\t<property>\n\t\t<name>yarn.nodemanager.aux-services</name>\n\t\t<value>mapreduce_shuffle</value>\n\t</property>\n\t<property>\n\t\t<name>yarn.resourcemanager.hostname</name>\n\t\t<value>node1</value>\n\t</property>\n\t\t\t\n**配置datanode节点信息**\n        vim slaves\nnode1\nnode2\nnode3\n\t\t\t\n**提前准备主机名解析文件，为后面的克隆机器做好准备（可选，若不做，克隆后为每台机器重新添加亦可）**\n    sudo vim /etc/hosts\n192.168.33.80  node1\n192.168.33.81  node2\n192.168.33.82  node3\n\t\t\n**重启 sudo reboot**\n\n**克隆其他集群信息**\n    关闭机器，准备克隆\n    克隆后，修改node2、node3的IP和主机名\n    修改主机名sudo vim /etc/hostname \n    修改IP:sudo vim /etc/sysconfig/network-scripts/ifcfg-ens33 \n    然后重启：sudo reboot\n\t\n**下面开始配置集群的ssh免密\n    在3台机器上执行产生自己的公钥：**\n        ssh-keygen -t rsa\n    按照默认值回车确定\n    将每台机器的公钥拷贝给每台机器，注意下面的指令要求3台机器都要执行：\n        ssh-copy-id node1\n        ssh-copy-id node2\n        ssh-copy-id node3\n\t\t\n**格式化hdfs**\n    hdfs namenode -format\n\n**开启集群测试**\nstart-dfs.sh\n\nHadoop3的web端访问端口为9870","slug":"Hadoop安装","published":1,"updated":"2022-10-21T12:57:11.884Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9psnbz3000138w140xa10i3","content":"<h3 id=\"hadoop分布式集群安装\"><a href=\"#hadoop分布式集群安装\" class=\"headerlink\" title=\"hadoop分布式集群安装\"></a>hadoop分布式集群安装</h3><p><strong>需下载</strong></p>\n<p>hadoop-3.3.4.tar.gz\t\t\tjdk-8u333-linux-x64.rpm   版本自己选择</p>\n<p>**安装虚拟机 **  </p>\n<p><strong>规划节点和IP地址（win+R cmd  ipconfig 查看VMnet8ip地址(我用的)把最后一个点后面改成自己想改的3个连续数字）</strong><br>node1 192.168.2.80 NN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnode2 192.168.2.81 DN<br>node3 192.168.2.82 SN</p>\n<p><strong>虚拟机设置管理员（安装CentOS7步骤里会有）(下面用户名均用user代替)</strong><br>用户名：自己设<br>密码：自己设</p>\n<p>使用MobaXtem连接192.168.2.80（如果连接不上需要打开控制面板-&gt;网络和Internet-&gt;网络和共享中心-&gt;更改适配器设置-&gt;启用两个以太网VMware）（可以不用远程连接工具，只是为了方便上传文件）<br>**安装基础工具 **<br>sudo yum install net-tools<br>sudo yum install vim</p>\n<p>在user的~目录下新建文件夹 mkdir software，修改权限 chmod -R 777 software<br>将Hadoop和jdk安装包放到soft文件夹下，注意，Java版本要求Java8及以下</p>\n<p>使用sudo rpm -ivh jdk-8u333-linux-x64.rpm 命令安装jdk包，<br>使用sudo tar -zxvf hadoop-3.3.4.tar.gz -C &#x2F;usr&#x2F; 将Hadoop解压到&#x2F;usr目录下<br>使用sudo chown -R user:user &#x2F;usr&#x2F;hadoop-3.3.4&#x2F;将hadoop-3.3.4改为user用户组的user用户</p>\n<p><strong>关闭防火墙（如果不关闭可能出现节点间无法通信的情况）</strong><br>sudo systemctl stop firewalld.service （停止防火墙）<br>sudo systemctl disable firewalld.service （彻底关闭防火墙）</p>\n<p><strong>关闭selinux（防止传输文件时出问题）</strong><br>sudo vim &#x2F;etc&#x2F;selinux&#x2F;config<br>修改为 SELINUX&#x3D;disabled</p>\n<p><strong>添加hadoop环境变量</strong></p>\n<p>把hdfs命令直接加到环境变量中，这样在任意地方执行hdfs命令都可以，不需要在进入hadoop-3.3.4&#x2F;bin目录下执行，也可以直接在&#x2F;etc&#x2F;profile里改，但为了方便维护，就直接在profile.d文件夹下新增一个.sh文件hdfs.sh，如果后期不想要这个命令，可直接删除hdfs.sh文件hdfs<br>新增一个sh文件sudo vim &#x2F;etc&#x2F;profile.d&#x2F;hdfs.sh，填入如下内容：<br>export HADOOP_HOME&#x3D;&#x2F;usr&#x2F;hadoop-3.3.4<br>export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;bin:$HADOOP_HOME&#x2F;sbin<br>重启profile：source &#x2F;etc&#x2F;profile  （相当于重启了source，让hdfs.sh被激活，起作用）</p>\n<p><strong>java环境变量配置:</strong><br>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk-1.8.0.345.b01-1.el7_9.x86_64（这填自己的java安装目录）<br>export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH<br>export CLASSPATH&#x3D;:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</p>\n<p>whereis java（寻找java安装目录）<br>ls -lrt &#x2F;usr&#x2F;bin&#x2F;java<br>ls -lrt &#x2F;etc&#x2F;alternatives&#x2F;java</p>\n<p>&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk-1.8.0.345.b01-1.el7_9.x86_64&#x2F;jre&#x2F;bin(我的java安装目录)</p>\n<p>找不到，详情可以看<a href=\"https://blog.csdn.net/baidu32552365/article/details/108716966\"> Centos7 bash：jps：未找到命令</a></p>\n<p><strong>创建HDFS的NN和DN工作主目录:</strong><br>sudo mkdir &#x2F;var&#x2F;big_data<br>sudo chown -R user:user &#x2F;var&#x2F;big_data</p>\n<p><strong>配置Hadoop（一般.sh文件都是寻找Java运行环境，因此主要配置JAVA_HOME）</strong><br>进入 cd &#x2F;usr&#x2F;hadoop-3.3.4&#x2F;etc&#x2F;hadoop 目录下<br>sudo vim hadoop-env.sh<br>修改export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;default</p>\n<p><strong>为Yarn任务、资源管理器提供Java运行环境（hadoop-3.3.4无需配置）</strong><br>vim yarn-env.sh<br>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;default</p>\n<p><strong>配置HDFS主节点信息、持久化和数据文件的主目录（如果tab不是4个空格，改一下sudo vim &#x2F;etc&#x2F;vimrc，添加set ts&#x3D;4）</strong><br>        vim core-site.xml在<configuration>中添加如下配置<br>    <property><br>        <name>fs.defaultFS</name><br>        <value>hdfs:&#x2F;&#x2F;node1:9000</value><br>    </property><br>    <property><br>        <name>hadoop.tmp.dir</name><br>        <value>&#x2F;var&#x2F;big_data</value><br>    </property></p>\n<p><strong>配置HDFS默认的数据存放策略</strong><br>        vim hdfs-site.xml<br>    <property><br>        <name>dfs.replication</name><br>        <value>2</value><br>    </property><br>    <property><br>        <name>dfs.namenode.secondary.http-address</name><br>        <value>node3:9868</value><br>    </property><br>    <property><br>        <name>hadoop.proxyuser.user.hosts</name><br>        <value><em></value><br>    </property><br>    <property><br>        <name>hadoop.proxyuser.user.groups</name><br>        <value></em></value><br>    </property></p>\n<p><strong>配置mapreduce任务调度策略</strong><br>        vim mapred-site.xml<br>    <property><br>        <name>mapreduce.framework.name</name><br>        <value>yarn</value><br>    </property></p>\n<p><strong>配置Yarn资源管理角色的信息</strong><br>        vim yarn-site.xml<br>    <property><br>        <name>yarn.nodemanager.aux-services</name><br>        <value>mapreduce_shuffle</value><br>    </property><br>    <property><br>        <name>yarn.resourcemanager.hostname</name><br>        <value>node1</value><br>    </property></p>\n<p><strong>配置datanode节点信息</strong><br>        vim slaves<br>node1<br>node2<br>node3</p>\n<p><strong>提前准备主机名解析文件，为后面的克隆机器做好准备（可选，若不做，克隆后为每台机器重新添加亦可）</strong><br>    sudo vim &#x2F;etc&#x2F;hosts<br>192.168.33.80  node1<br>192.168.33.81  node2<br>192.168.33.82  node3</p>\n<p><strong>重启 sudo reboot</strong></p>\n<p><strong>克隆其他集群信息</strong><br>    关闭机器，准备克隆<br>    克隆后，修改node2、node3的IP和主机名<br>    修改主机名sudo vim &#x2F;etc&#x2F;hostname<br>    修改IP:sudo vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33<br>    然后重启：sudo reboot</p>\n<p><strong>下面开始配置集群的ssh免密<br>    在3台机器上执行产生自己的公钥：</strong><br>        ssh-keygen -t rsa<br>    按照默认值回车确定<br>    将每台机器的公钥拷贝给每台机器，注意下面的指令要求3台机器都要执行：<br>        ssh-copy-id node1<br>        ssh-copy-id node2<br>        ssh-copy-id node3</p>\n<p><strong>格式化hdfs</strong><br>    hdfs namenode -format</p>\n<p><strong>开启集群测试</strong><br>start-dfs.sh</p>\n<p>Hadoop3的web端访问端口为9870</p>\n","site":{"data":{"links":[{"name":"yixin","link":"https://blog.yixinfangfa.top/","description":"","avatar":""},{"name":"GiriNeko的猫窝","link":" https://ineko.cc/","description":"一头会说话的咸鱼","avatar":"https://static.ineko.cc/images/favicon.png"}]}},"excerpt":"","more":"<h3 id=\"hadoop分布式集群安装\"><a href=\"#hadoop分布式集群安装\" class=\"headerlink\" title=\"hadoop分布式集群安装\"></a>hadoop分布式集群安装</h3><p><strong>需下载</strong></p>\n<p>hadoop-3.3.4.tar.gz\t\t\tjdk-8u333-linux-x64.rpm   版本自己选择</p>\n<p>**安装虚拟机 **  </p>\n<p><strong>规划节点和IP地址（win+R cmd  ipconfig 查看VMnet8ip地址(我用的)把最后一个点后面改成自己想改的3个连续数字）</strong><br>node1 192.168.2.80 NN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnode2 192.168.2.81 DN<br>node3 192.168.2.82 SN</p>\n<p><strong>虚拟机设置管理员（安装CentOS7步骤里会有）(下面用户名均用user代替)</strong><br>用户名：自己设<br>密码：自己设</p>\n<p>使用MobaXtem连接192.168.2.80（如果连接不上需要打开控制面板-&gt;网络和Internet-&gt;网络和共享中心-&gt;更改适配器设置-&gt;启用两个以太网VMware）（可以不用远程连接工具，只是为了方便上传文件）<br>**安装基础工具 **<br>sudo yum install net-tools<br>sudo yum install vim</p>\n<p>在user的~目录下新建文件夹 mkdir software，修改权限 chmod -R 777 software<br>将Hadoop和jdk安装包放到soft文件夹下，注意，Java版本要求Java8及以下</p>\n<p>使用sudo rpm -ivh jdk-8u333-linux-x64.rpm 命令安装jdk包，<br>使用sudo tar -zxvf hadoop-3.3.4.tar.gz -C &#x2F;usr&#x2F; 将Hadoop解压到&#x2F;usr目录下<br>使用sudo chown -R user:user &#x2F;usr&#x2F;hadoop-3.3.4&#x2F;将hadoop-3.3.4改为user用户组的user用户</p>\n<p><strong>关闭防火墙（如果不关闭可能出现节点间无法通信的情况）</strong><br>sudo systemctl stop firewalld.service （停止防火墙）<br>sudo systemctl disable firewalld.service （彻底关闭防火墙）</p>\n<p><strong>关闭selinux（防止传输文件时出问题）</strong><br>sudo vim &#x2F;etc&#x2F;selinux&#x2F;config<br>修改为 SELINUX&#x3D;disabled</p>\n<p><strong>添加hadoop环境变量</strong></p>\n<p>把hdfs命令直接加到环境变量中，这样在任意地方执行hdfs命令都可以，不需要在进入hadoop-3.3.4&#x2F;bin目录下执行，也可以直接在&#x2F;etc&#x2F;profile里改，但为了方便维护，就直接在profile.d文件夹下新增一个.sh文件hdfs.sh，如果后期不想要这个命令，可直接删除hdfs.sh文件hdfs<br>新增一个sh文件sudo vim &#x2F;etc&#x2F;profile.d&#x2F;hdfs.sh，填入如下内容：<br>export HADOOP_HOME&#x3D;&#x2F;usr&#x2F;hadoop-3.3.4<br>export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;bin:$HADOOP_HOME&#x2F;sbin<br>重启profile：source &#x2F;etc&#x2F;profile  （相当于重启了source，让hdfs.sh被激活，起作用）</p>\n<p><strong>java环境变量配置:</strong><br>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk-1.8.0.345.b01-1.el7_9.x86_64（这填自己的java安装目录）<br>export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH<br>export CLASSPATH&#x3D;:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</p>\n<p>whereis java（寻找java安装目录）<br>ls -lrt &#x2F;usr&#x2F;bin&#x2F;java<br>ls -lrt &#x2F;etc&#x2F;alternatives&#x2F;java</p>\n<p>&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk-1.8.0.345.b01-1.el7_9.x86_64&#x2F;jre&#x2F;bin(我的java安装目录)</p>\n<p>找不到，详情可以看<a href=\"https://blog.csdn.net/baidu32552365/article/details/108716966\"> Centos7 bash：jps：未找到命令</a></p>\n<p><strong>创建HDFS的NN和DN工作主目录:</strong><br>sudo mkdir &#x2F;var&#x2F;big_data<br>sudo chown -R user:user &#x2F;var&#x2F;big_data</p>\n<p><strong>配置Hadoop（一般.sh文件都是寻找Java运行环境，因此主要配置JAVA_HOME）</strong><br>进入 cd &#x2F;usr&#x2F;hadoop-3.3.4&#x2F;etc&#x2F;hadoop 目录下<br>sudo vim hadoop-env.sh<br>修改export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;default</p>\n<p><strong>为Yarn任务、资源管理器提供Java运行环境（hadoop-3.3.4无需配置）</strong><br>vim yarn-env.sh<br>export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;default</p>\n<p><strong>配置HDFS主节点信息、持久化和数据文件的主目录（如果tab不是4个空格，改一下sudo vim &#x2F;etc&#x2F;vimrc，添加set ts&#x3D;4）</strong><br>        vim core-site.xml在<configuration>中添加如下配置<br>    <property><br>        <name>fs.defaultFS</name><br>        <value>hdfs:&#x2F;&#x2F;node1:9000</value><br>    </property><br>    <property><br>        <name>hadoop.tmp.dir</name><br>        <value>&#x2F;var&#x2F;big_data</value><br>    </property></p>\n<p><strong>配置HDFS默认的数据存放策略</strong><br>        vim hdfs-site.xml<br>    <property><br>        <name>dfs.replication</name><br>        <value>2</value><br>    </property><br>    <property><br>        <name>dfs.namenode.secondary.http-address</name><br>        <value>node3:9868</value><br>    </property><br>    <property><br>        <name>hadoop.proxyuser.user.hosts</name><br>        <value><em></value><br>    </property><br>    <property><br>        <name>hadoop.proxyuser.user.groups</name><br>        <value></em></value><br>    </property></p>\n<p><strong>配置mapreduce任务调度策略</strong><br>        vim mapred-site.xml<br>    <property><br>        <name>mapreduce.framework.name</name><br>        <value>yarn</value><br>    </property></p>\n<p><strong>配置Yarn资源管理角色的信息</strong><br>        vim yarn-site.xml<br>    <property><br>        <name>yarn.nodemanager.aux-services</name><br>        <value>mapreduce_shuffle</value><br>    </property><br>    <property><br>        <name>yarn.resourcemanager.hostname</name><br>        <value>node1</value><br>    </property></p>\n<p><strong>配置datanode节点信息</strong><br>        vim slaves<br>node1<br>node2<br>node3</p>\n<p><strong>提前准备主机名解析文件，为后面的克隆机器做好准备（可选，若不做，克隆后为每台机器重新添加亦可）</strong><br>    sudo vim &#x2F;etc&#x2F;hosts<br>192.168.33.80  node1<br>192.168.33.81  node2<br>192.168.33.82  node3</p>\n<p><strong>重启 sudo reboot</strong></p>\n<p><strong>克隆其他集群信息</strong><br>    关闭机器，准备克隆<br>    克隆后，修改node2、node3的IP和主机名<br>    修改主机名sudo vim &#x2F;etc&#x2F;hostname<br>    修改IP:sudo vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33<br>    然后重启：sudo reboot</p>\n<p><strong>下面开始配置集群的ssh免密<br>    在3台机器上执行产生自己的公钥：</strong><br>        ssh-keygen -t rsa<br>    按照默认值回车确定<br>    将每台机器的公钥拷贝给每台机器，注意下面的指令要求3台机器都要执行：<br>        ssh-copy-id node1<br>        ssh-copy-id node2<br>        ssh-copy-id node3</p>\n<p><strong>格式化hdfs</strong><br>    hdfs namenode -format</p>\n<p><strong>开启集群测试</strong><br>start-dfs.sh</p>\n<p>Hadoop3的web端访问端口为9870</p>\n"},{"title":"Hive安装","date":"2022-10-21T12:13:13.000Z","cover":"https://qiansen.oss-cn-hangzhou.aliyuncs.com/Hive安装.jpg","_content":"\n### hive安装流程\n\n**需下载(版本可以不同)**\n\nmysql-5.7.29-1.el7.x86_64.rpm-bundle.tar\n\napache-hive-3.1.2-bin.tar.gz\n\nmysql-connector-java-5.1.32.jar\n\n**Mysql安装**\n\n#卸载Centos7自带mariadb\nrpm -qa|grep mariadb\n会显示你虚拟机自带mariadb的版本\nrpm -e\t上面显示的版本(直接复制粘贴) --nodeps\n\n#上传mysql-5.7.29安装包到/software下，解压\ntar xvf mysql-5.7.29-1.el7.x86_64.rpm-bundle.tar\n\n**执行安装**\nrpm -ivh mysql-community-common-5.7.29-1.el7.x86_64.rpm mysql-community-libs-5.7.29-1.el7.x86_64.rpm mysql-community-client-5.7.29-1.el7.x86_64.rpm mysql-community-server-5.7.29-1.el7.x86_64.rpm\n\n初始化mysql\nmysqld --initialize\n#更改所属组\nchown mysql:mysql /var/lib/mysql -R\n\n#启动mysql\nsystemctl start mysqld.service\n#查看生成的临时root密码\ncat /var/log/mysqld.log\n#这行日志的最后就是随机生成的临时密码\n[Note] A temporary password is generated for root@localhost: 临时密码\n\n#修改mysql root密码、授权远程访问\nmysql -u root -p\nEnter password:     #这里输入在日志中生成的临时密码\n\n#更新root密码  （设置为自己想设置的）\nmysql> alter user user() identified by \"123456\";\nQuery OK, 0 rows affected (0.00 sec)\n#授权\nmysql> use mysql;\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;\nmysql> FLUSH PRIVILEGES;\n#退出\nexit;\n\n#mysql的启动和关闭 状态查看\nsystemctl stop mysqld\nsystemctl status mysqld\nsystemctl start mysqld\nsystemctl status mysqld\n\n#建议设置为开机自启动服务\nsystemctl enable  mysqld\n#查看是否已经设置自启动成功\nsystemctl list-unit-files | grep mysqld\n\n**Hive安装配置**\n\n#上传解压安装包\n\ncd /home/虚拟机用户名/software\ntar zxvf apache-hive-3.1.2-bin.tar.gz -C /usr/\ncd /usr\nmv apache-hive-3.1.2-bin hive\n\n#解决hadoop、hive之间guava版本差异（Java的一个工具包）\ncd /usr/hive\nrm -rf lib/guava-19.0.jar\ncp /usr/hadoop-3.3.4/share/hadoop/common/lib/guava-27.0-jre.jar ./lib/\n\n#添加mysql jdbc驱动到hive安装包lib/文件下\ncd /home/虚拟机用户名/software/\nmv mysql-connector-java-5.1.32.jar /usr/hive/lib/\n\n#修改hive环境变量文件 添加Hadoop_HOME\ncd /usr/hive/conf/\nmv hive-env.sh.template hive-env.sh\nvim hive-env.sh\nexport HADOOP_HOME=/usr/hadoop-3.3.4\nexport HIVE_CONF_DIR=/usr/hive/conf\nexport HIVE_AUX_JARS_PATH=/usr/hive/lib\n\n#新增hive-site.xml 配置mysql等相关信息\nvim hive-site.xml\n\n#-----------------hive-site.xml--------------\n<configuration>\n    <!-- 存储元数据mysql相关配置 -->\n    <property>\n        <name>javax.jdo.option.ConnectionURL</name>\n        <value> jdbc:mysql://localhost:3306/hivecreateDatabaseIfNotExist=true$amp;useSSL=false$amp;useUnicode=true&amp;characterEncoding=UTF-8</value>\n    </property>\n\n<property>\n    <name>javax.jdo.option.ConnectionDriverName</name>\n    <value>com.mysql.jdbc.Driver</value>\n</property>\n\n<property>\n    <name>javax.jdo.option.ConnectionUserName</name>\n    <value>root</value>\n</property>\n\n<property>\n    <name>javax.jdo.option.ConnectionPassword</name>\n    <value>123456</value>\n</property>\n\n<!-- 配置hiveservver2端口号和主机名 -->\n<property>\n    <name>hive.server2.thrift.port</name>\n    <value>10000</value>\n</property>\n<property>\n    <name>hive.server2.thrift.bind.host</name>\n    <value>localhost</value>\n</property>\n\n<!-- 远程模式部署metastore 服务地址 -->\n<property>\n    <name>hive.metastore.uris</name>\n    <value>thrift://node1:9083</value>\n</property>\n\n<!-- 关闭元数据存储授权  -->\n<property>\n    <name>hive.metastore.event.db.notification.api.auth</name>\n    <value>false</value>\n</property>\n\n<!-- 关闭元数据存储版本的验证 -->\n<property>\n    <name>hive.metastore.schema.verification</name>\n    <value>false</value>\n</property>\n\n</configuration>\n\n#初始化metadata\ncd /usr/hive\nbin/schematool -initSchema -dbType mysql -verbos\n#初始化成功会在mysql中的hive数据仓库创建74张表\nmysql -uroot -p\n123456\n\nshow databases;\n\n**Metastore Hiveserver2启动**\n\n#hive环境变量的配置\n在/etc/profile.d下新建hive.sh文件，并添加环境变量信息：\nsudo vim /etc/profile.d/hive.sh\n\n添加：\nexport HIVE_HOME=/usr/hive\nexport PATH=$PATH:$HIVE_HOME/bin:$HIVE_HOME/sbin\n\n保存并退出\n:wq\n\n刷新profile\nsource profile\n\n#前台启动（关闭ctrl+c）\nhive --service metastore\n\n#后台启动 进程挂起（关闭使用jps + kill）\n#输入命令回车执行 再次回车 进程将挂起后台\nnohup /export/server/hive/bin/hive --service metastore &\n\n#前台启动开启debug日志\n/export/server/hive/bin/hive --service metastore --hiveconf hive.root.logger=DEBUG,console\n\n启动hive总体流程\n启动hive需要先启动集群：start-dfs.sh （前提是已经在/etc/profile.d/文件夹下添加了hdfs.sh文件，若没有添加，则需要进入hadoop所在文件夹下，执行sbin/start-dfs.sh）\n再启动Metastore服务：nohup /usr/hive/bin/hive --service metastore &（远程模式需要手动启动）\n再启动hiveservver2：nohup /usr/hive/bin/hive --service hiveserver2 &\n再启动hive：bin/beeline，在里面通过JDBC启动与hiveserver的连接：!connect jdbc:hive2://localhost:10000，输入用户名为主机的用户名，密码为用户密码。","source":"_posts/Hive安装.md","raw":"---\ntitle: Hive安装\ndate: 2022-10-21 20:13:13\ntags: 学习\ncategory: 学习\ncover: https://qiansen.oss-cn-hangzhou.aliyuncs.com/Hive安装.jpg\n---\n\n### hive安装流程\n\n**需下载(版本可以不同)**\n\nmysql-5.7.29-1.el7.x86_64.rpm-bundle.tar\n\napache-hive-3.1.2-bin.tar.gz\n\nmysql-connector-java-5.1.32.jar\n\n**Mysql安装**\n\n#卸载Centos7自带mariadb\nrpm -qa|grep mariadb\n会显示你虚拟机自带mariadb的版本\nrpm -e\t上面显示的版本(直接复制粘贴) --nodeps\n\n#上传mysql-5.7.29安装包到/software下，解压\ntar xvf mysql-5.7.29-1.el7.x86_64.rpm-bundle.tar\n\n**执行安装**\nrpm -ivh mysql-community-common-5.7.29-1.el7.x86_64.rpm mysql-community-libs-5.7.29-1.el7.x86_64.rpm mysql-community-client-5.7.29-1.el7.x86_64.rpm mysql-community-server-5.7.29-1.el7.x86_64.rpm\n\n初始化mysql\nmysqld --initialize\n#更改所属组\nchown mysql:mysql /var/lib/mysql -R\n\n#启动mysql\nsystemctl start mysqld.service\n#查看生成的临时root密码\ncat /var/log/mysqld.log\n#这行日志的最后就是随机生成的临时密码\n[Note] A temporary password is generated for root@localhost: 临时密码\n\n#修改mysql root密码、授权远程访问\nmysql -u root -p\nEnter password:     #这里输入在日志中生成的临时密码\n\n#更新root密码  （设置为自己想设置的）\nmysql> alter user user() identified by \"123456\";\nQuery OK, 0 rows affected (0.00 sec)\n#授权\nmysql> use mysql;\nmysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;\nmysql> FLUSH PRIVILEGES;\n#退出\nexit;\n\n#mysql的启动和关闭 状态查看\nsystemctl stop mysqld\nsystemctl status mysqld\nsystemctl start mysqld\nsystemctl status mysqld\n\n#建议设置为开机自启动服务\nsystemctl enable  mysqld\n#查看是否已经设置自启动成功\nsystemctl list-unit-files | grep mysqld\n\n**Hive安装配置**\n\n#上传解压安装包\n\ncd /home/虚拟机用户名/software\ntar zxvf apache-hive-3.1.2-bin.tar.gz -C /usr/\ncd /usr\nmv apache-hive-3.1.2-bin hive\n\n#解决hadoop、hive之间guava版本差异（Java的一个工具包）\ncd /usr/hive\nrm -rf lib/guava-19.0.jar\ncp /usr/hadoop-3.3.4/share/hadoop/common/lib/guava-27.0-jre.jar ./lib/\n\n#添加mysql jdbc驱动到hive安装包lib/文件下\ncd /home/虚拟机用户名/software/\nmv mysql-connector-java-5.1.32.jar /usr/hive/lib/\n\n#修改hive环境变量文件 添加Hadoop_HOME\ncd /usr/hive/conf/\nmv hive-env.sh.template hive-env.sh\nvim hive-env.sh\nexport HADOOP_HOME=/usr/hadoop-3.3.4\nexport HIVE_CONF_DIR=/usr/hive/conf\nexport HIVE_AUX_JARS_PATH=/usr/hive/lib\n\n#新增hive-site.xml 配置mysql等相关信息\nvim hive-site.xml\n\n#-----------------hive-site.xml--------------\n<configuration>\n    <!-- 存储元数据mysql相关配置 -->\n    <property>\n        <name>javax.jdo.option.ConnectionURL</name>\n        <value> jdbc:mysql://localhost:3306/hivecreateDatabaseIfNotExist=true$amp;useSSL=false$amp;useUnicode=true&amp;characterEncoding=UTF-8</value>\n    </property>\n\n<property>\n    <name>javax.jdo.option.ConnectionDriverName</name>\n    <value>com.mysql.jdbc.Driver</value>\n</property>\n\n<property>\n    <name>javax.jdo.option.ConnectionUserName</name>\n    <value>root</value>\n</property>\n\n<property>\n    <name>javax.jdo.option.ConnectionPassword</name>\n    <value>123456</value>\n</property>\n\n<!-- 配置hiveservver2端口号和主机名 -->\n<property>\n    <name>hive.server2.thrift.port</name>\n    <value>10000</value>\n</property>\n<property>\n    <name>hive.server2.thrift.bind.host</name>\n    <value>localhost</value>\n</property>\n\n<!-- 远程模式部署metastore 服务地址 -->\n<property>\n    <name>hive.metastore.uris</name>\n    <value>thrift://node1:9083</value>\n</property>\n\n<!-- 关闭元数据存储授权  -->\n<property>\n    <name>hive.metastore.event.db.notification.api.auth</name>\n    <value>false</value>\n</property>\n\n<!-- 关闭元数据存储版本的验证 -->\n<property>\n    <name>hive.metastore.schema.verification</name>\n    <value>false</value>\n</property>\n\n</configuration>\n\n#初始化metadata\ncd /usr/hive\nbin/schematool -initSchema -dbType mysql -verbos\n#初始化成功会在mysql中的hive数据仓库创建74张表\nmysql -uroot -p\n123456\n\nshow databases;\n\n**Metastore Hiveserver2启动**\n\n#hive环境变量的配置\n在/etc/profile.d下新建hive.sh文件，并添加环境变量信息：\nsudo vim /etc/profile.d/hive.sh\n\n添加：\nexport HIVE_HOME=/usr/hive\nexport PATH=$PATH:$HIVE_HOME/bin:$HIVE_HOME/sbin\n\n保存并退出\n:wq\n\n刷新profile\nsource profile\n\n#前台启动（关闭ctrl+c）\nhive --service metastore\n\n#后台启动 进程挂起（关闭使用jps + kill）\n#输入命令回车执行 再次回车 进程将挂起后台\nnohup /export/server/hive/bin/hive --service metastore &\n\n#前台启动开启debug日志\n/export/server/hive/bin/hive --service metastore --hiveconf hive.root.logger=DEBUG,console\n\n启动hive总体流程\n启动hive需要先启动集群：start-dfs.sh （前提是已经在/etc/profile.d/文件夹下添加了hdfs.sh文件，若没有添加，则需要进入hadoop所在文件夹下，执行sbin/start-dfs.sh）\n再启动Metastore服务：nohup /usr/hive/bin/hive --service metastore &（远程模式需要手动启动）\n再启动hiveservver2：nohup /usr/hive/bin/hive --service hiveserver2 &\n再启动hive：bin/beeline，在里面通过JDBC启动与hiveserver的连接：!connect jdbc:hive2://localhost:10000，输入用户名为主机的用户名，密码为用户密码。","slug":"Hive安装","published":1,"updated":"2022-10-21T12:57:01.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9psnbz6000338w11o3chgq9","content":"<h3 id=\"hive安装流程\"><a href=\"#hive安装流程\" class=\"headerlink\" title=\"hive安装流程\"></a>hive安装流程</h3><p><strong>需下载(版本可以不同)</strong></p>\n<p>mysql-5.7.29-1.el7.x86_64.rpm-bundle.tar</p>\n<p>apache-hive-3.1.2-bin.tar.gz</p>\n<p>mysql-connector-java-5.1.32.jar</p>\n<p><strong>Mysql安装</strong></p>\n<p>#卸载Centos7自带mariadb<br>rpm -qa|grep mariadb<br>会显示你虚拟机自带mariadb的版本<br>rpm -e\t上面显示的版本(直接复制粘贴) –nodeps</p>\n<p>#上传mysql-5.7.29安装包到&#x2F;software下，解压<br>tar xvf mysql-5.7.29-1.el7.x86_64.rpm-bundle.tar</p>\n<p><strong>执行安装</strong><br>rpm -ivh mysql-community-common-5.7.29-1.el7.x86_64.rpm mysql-community-libs-5.7.29-1.el7.x86_64.rpm mysql-community-client-5.7.29-1.el7.x86_64.rpm mysql-community-server-5.7.29-1.el7.x86_64.rpm</p>\n<p>初始化mysql<br>mysqld –initialize<br>#更改所属组<br>chown mysql:mysql &#x2F;var&#x2F;lib&#x2F;mysql -R</p>\n<p>#启动mysql<br>systemctl start mysqld.service<br>#查看生成的临时root密码<br>cat &#x2F;var&#x2F;log&#x2F;mysqld.log<br>#这行日志的最后就是随机生成的临时密码<br>[Note] A temporary password is generated for root@localhost: 临时密码</p>\n<p>#修改mysql root密码、授权远程访问<br>mysql -u root -p<br>Enter password:     #这里输入在日志中生成的临时密码</p>\n<p>#更新root密码  （设置为自己想设置的）<br>mysql&gt; alter user user() identified by “123456”;<br>Query OK, 0 rows affected (0.00 sec)<br>#授权<br>mysql&gt; use mysql;<br>mysql&gt; GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ IDENTIFIED BY ‘123456’ WITH GRANT OPTION;<br>mysql&gt; FLUSH PRIVILEGES;<br>#退出<br>exit;</p>\n<p>#mysql的启动和关闭 状态查看<br>systemctl stop mysqld<br>systemctl status mysqld<br>systemctl start mysqld<br>systemctl status mysqld</p>\n<p>#建议设置为开机自启动服务<br>systemctl enable  mysqld<br>#查看是否已经设置自启动成功<br>systemctl list-unit-files | grep mysqld</p>\n<p><strong>Hive安装配置</strong></p>\n<p>#上传解压安装包</p>\n<p>cd &#x2F;home&#x2F;虚拟机用户名&#x2F;software<br>tar zxvf apache-hive-3.1.2-bin.tar.gz -C &#x2F;usr&#x2F;<br>cd &#x2F;usr<br>mv apache-hive-3.1.2-bin hive</p>\n<p>#解决hadoop、hive之间guava版本差异（Java的一个工具包）<br>cd &#x2F;usr&#x2F;hive<br>rm -rf lib&#x2F;guava-19.0.jar<br>cp &#x2F;usr&#x2F;hadoop-3.3.4&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;guava-27.0-jre.jar .&#x2F;lib&#x2F;</p>\n<p>#添加mysql jdbc驱动到hive安装包lib&#x2F;文件下<br>cd &#x2F;home&#x2F;虚拟机用户名&#x2F;software&#x2F;<br>mv mysql-connector-java-5.1.32.jar &#x2F;usr&#x2F;hive&#x2F;lib&#x2F;</p>\n<p>#修改hive环境变量文件 添加Hadoop_HOME<br>cd &#x2F;usr&#x2F;hive&#x2F;conf&#x2F;<br>mv hive-env.sh.template hive-env.sh<br>vim hive-env.sh<br>export HADOOP_HOME&#x3D;&#x2F;usr&#x2F;hadoop-3.3.4<br>export HIVE_CONF_DIR&#x3D;&#x2F;usr&#x2F;hive&#x2F;conf<br>export HIVE_AUX_JARS_PATH&#x3D;&#x2F;usr&#x2F;hive&#x2F;lib</p>\n<p>#新增hive-site.xml 配置mysql等相关信息<br>vim hive-site.xml</p>\n<p>#—————–hive-site.xml————–<br><configuration><br>    <!-- 存储元数据mysql相关配置 --><br>    <property><br>        <name>javax.jdo.option.ConnectionURL</name><br>        <value> jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;hivecreateDatabaseIfNotExist&#x3D;true$amp;useSSL&#x3D;false$amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8</value><br>    </property></p>\n<property>\n    <name>javax.jdo.option.ConnectionDriverName</name>\n    <value>com.mysql.jdbc.Driver</value>\n</property>\n\n<property>\n    <name>javax.jdo.option.ConnectionUserName</name>\n    <value>root</value>\n</property>\n\n<property>\n    <name>javax.jdo.option.ConnectionPassword</name>\n    <value>123456</value>\n</property>\n\n<!-- 配置hiveservver2端口号和主机名 -->\n<property>\n    <name>hive.server2.thrift.port</name>\n    <value>10000</value>\n</property>\n<property>\n    <name>hive.server2.thrift.bind.host</name>\n    <value>localhost</value>\n</property>\n\n<!-- 远程模式部署metastore 服务地址 -->\n<property>\n    <name>hive.metastore.uris</name>\n    <value>thrift://node1:9083</value>\n</property>\n\n<!-- 关闭元数据存储授权  -->\n<property>\n    <name>hive.metastore.event.db.notification.api.auth</name>\n    <value>false</value>\n</property>\n\n<!-- 关闭元数据存储版本的验证 -->\n<property>\n    <name>hive.metastore.schema.verification</name>\n    <value>false</value>\n</property>\n\n</configuration>\n\n<p>#初始化metadata<br>cd &#x2F;usr&#x2F;hive<br>bin&#x2F;schematool -initSchema -dbType mysql -verbos<br>#初始化成功会在mysql中的hive数据仓库创建74张表<br>mysql -uroot -p<br>123456</p>\n<p>show databases;</p>\n<p><strong>Metastore Hiveserver2启动</strong></p>\n<p>#hive环境变量的配置<br>在&#x2F;etc&#x2F;profile.d下新建hive.sh文件，并添加环境变量信息：<br>sudo vim &#x2F;etc&#x2F;profile.d&#x2F;hive.sh</p>\n<p>添加：<br>export HIVE_HOME&#x3D;&#x2F;usr&#x2F;hive<br>export PATH&#x3D;$PATH:$HIVE_HOME&#x2F;bin:$HIVE_HOME&#x2F;sbin</p>\n<p>保存并退出<br>:wq</p>\n<p>刷新profile<br>source profile</p>\n<p>#前台启动（关闭ctrl+c）<br>hive –service metastore</p>\n<p>#后台启动 进程挂起（关闭使用jps + kill）<br>#输入命令回车执行 再次回车 进程将挂起后台<br>nohup &#x2F;export&#x2F;server&#x2F;hive&#x2F;bin&#x2F;hive –service metastore &amp;</p>\n<p>#前台启动开启debug日志<br>&#x2F;export&#x2F;server&#x2F;hive&#x2F;bin&#x2F;hive –service metastore –hiveconf hive.root.logger&#x3D;DEBUG,console</p>\n<p>启动hive总体流程<br>启动hive需要先启动集群：start-dfs.sh （前提是已经在&#x2F;etc&#x2F;profile.d&#x2F;文件夹下添加了hdfs.sh文件，若没有添加，则需要进入hadoop所在文件夹下，执行sbin&#x2F;start-dfs.sh）<br>再启动Metastore服务：nohup &#x2F;usr&#x2F;hive&#x2F;bin&#x2F;hive –service metastore &amp;（远程模式需要手动启动）<br>再启动hiveservver2：nohup &#x2F;usr&#x2F;hive&#x2F;bin&#x2F;hive –service hiveserver2 &amp;<br>再启动hive：bin&#x2F;beeline，在里面通过JDBC启动与hiveserver的连接：!connect jdbc:hive2:&#x2F;&#x2F;localhost:10000，输入用户名为主机的用户名，密码为用户密码。</p>\n","site":{"data":{"links":[{"name":"yixin","link":"https://blog.yixinfangfa.top/","description":"","avatar":""},{"name":"GiriNeko的猫窝","link":" https://ineko.cc/","description":"一头会说话的咸鱼","avatar":"https://static.ineko.cc/images/favicon.png"}]}},"excerpt":"","more":"<h3 id=\"hive安装流程\"><a href=\"#hive安装流程\" class=\"headerlink\" title=\"hive安装流程\"></a>hive安装流程</h3><p><strong>需下载(版本可以不同)</strong></p>\n<p>mysql-5.7.29-1.el7.x86_64.rpm-bundle.tar</p>\n<p>apache-hive-3.1.2-bin.tar.gz</p>\n<p>mysql-connector-java-5.1.32.jar</p>\n<p><strong>Mysql安装</strong></p>\n<p>#卸载Centos7自带mariadb<br>rpm -qa|grep mariadb<br>会显示你虚拟机自带mariadb的版本<br>rpm -e\t上面显示的版本(直接复制粘贴) –nodeps</p>\n<p>#上传mysql-5.7.29安装包到&#x2F;software下，解压<br>tar xvf mysql-5.7.29-1.el7.x86_64.rpm-bundle.tar</p>\n<p><strong>执行安装</strong><br>rpm -ivh mysql-community-common-5.7.29-1.el7.x86_64.rpm mysql-community-libs-5.7.29-1.el7.x86_64.rpm mysql-community-client-5.7.29-1.el7.x86_64.rpm mysql-community-server-5.7.29-1.el7.x86_64.rpm</p>\n<p>初始化mysql<br>mysqld –initialize<br>#更改所属组<br>chown mysql:mysql &#x2F;var&#x2F;lib&#x2F;mysql -R</p>\n<p>#启动mysql<br>systemctl start mysqld.service<br>#查看生成的临时root密码<br>cat &#x2F;var&#x2F;log&#x2F;mysqld.log<br>#这行日志的最后就是随机生成的临时密码<br>[Note] A temporary password is generated for root@localhost: 临时密码</p>\n<p>#修改mysql root密码、授权远程访问<br>mysql -u root -p<br>Enter password:     #这里输入在日志中生成的临时密码</p>\n<p>#更新root密码  （设置为自己想设置的）<br>mysql&gt; alter user user() identified by “123456”;<br>Query OK, 0 rows affected (0.00 sec)<br>#授权<br>mysql&gt; use mysql;<br>mysql&gt; GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root‘@’%’ IDENTIFIED BY ‘123456’ WITH GRANT OPTION;<br>mysql&gt; FLUSH PRIVILEGES;<br>#退出<br>exit;</p>\n<p>#mysql的启动和关闭 状态查看<br>systemctl stop mysqld<br>systemctl status mysqld<br>systemctl start mysqld<br>systemctl status mysqld</p>\n<p>#建议设置为开机自启动服务<br>systemctl enable  mysqld<br>#查看是否已经设置自启动成功<br>systemctl list-unit-files | grep mysqld</p>\n<p><strong>Hive安装配置</strong></p>\n<p>#上传解压安装包</p>\n<p>cd &#x2F;home&#x2F;虚拟机用户名&#x2F;software<br>tar zxvf apache-hive-3.1.2-bin.tar.gz -C &#x2F;usr&#x2F;<br>cd &#x2F;usr<br>mv apache-hive-3.1.2-bin hive</p>\n<p>#解决hadoop、hive之间guava版本差异（Java的一个工具包）<br>cd &#x2F;usr&#x2F;hive<br>rm -rf lib&#x2F;guava-19.0.jar<br>cp &#x2F;usr&#x2F;hadoop-3.3.4&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;guava-27.0-jre.jar .&#x2F;lib&#x2F;</p>\n<p>#添加mysql jdbc驱动到hive安装包lib&#x2F;文件下<br>cd &#x2F;home&#x2F;虚拟机用户名&#x2F;software&#x2F;<br>mv mysql-connector-java-5.1.32.jar &#x2F;usr&#x2F;hive&#x2F;lib&#x2F;</p>\n<p>#修改hive环境变量文件 添加Hadoop_HOME<br>cd &#x2F;usr&#x2F;hive&#x2F;conf&#x2F;<br>mv hive-env.sh.template hive-env.sh<br>vim hive-env.sh<br>export HADOOP_HOME&#x3D;&#x2F;usr&#x2F;hadoop-3.3.4<br>export HIVE_CONF_DIR&#x3D;&#x2F;usr&#x2F;hive&#x2F;conf<br>export HIVE_AUX_JARS_PATH&#x3D;&#x2F;usr&#x2F;hive&#x2F;lib</p>\n<p>#新增hive-site.xml 配置mysql等相关信息<br>vim hive-site.xml</p>\n<p>#—————–hive-site.xml————–<br><configuration><br>    <!-- 存储元数据mysql相关配置 --><br>    <property><br>        <name>javax.jdo.option.ConnectionURL</name><br>        <value> jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;hivecreateDatabaseIfNotExist&#x3D;true$amp;useSSL&#x3D;false$amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8</value><br>    </property></p>\n<property>\n    <name>javax.jdo.option.ConnectionDriverName</name>\n    <value>com.mysql.jdbc.Driver</value>\n</property>\n\n<property>\n    <name>javax.jdo.option.ConnectionUserName</name>\n    <value>root</value>\n</property>\n\n<property>\n    <name>javax.jdo.option.ConnectionPassword</name>\n    <value>123456</value>\n</property>\n\n<!-- 配置hiveservver2端口号和主机名 -->\n<property>\n    <name>hive.server2.thrift.port</name>\n    <value>10000</value>\n</property>\n<property>\n    <name>hive.server2.thrift.bind.host</name>\n    <value>localhost</value>\n</property>\n\n<!-- 远程模式部署metastore 服务地址 -->\n<property>\n    <name>hive.metastore.uris</name>\n    <value>thrift://node1:9083</value>\n</property>\n\n<!-- 关闭元数据存储授权  -->\n<property>\n    <name>hive.metastore.event.db.notification.api.auth</name>\n    <value>false</value>\n</property>\n\n<!-- 关闭元数据存储版本的验证 -->\n<property>\n    <name>hive.metastore.schema.verification</name>\n    <value>false</value>\n</property>\n\n</configuration>\n\n<p>#初始化metadata<br>cd &#x2F;usr&#x2F;hive<br>bin&#x2F;schematool -initSchema -dbType mysql -verbos<br>#初始化成功会在mysql中的hive数据仓库创建74张表<br>mysql -uroot -p<br>123456</p>\n<p>show databases;</p>\n<p><strong>Metastore Hiveserver2启动</strong></p>\n<p>#hive环境变量的配置<br>在&#x2F;etc&#x2F;profile.d下新建hive.sh文件，并添加环境变量信息：<br>sudo vim &#x2F;etc&#x2F;profile.d&#x2F;hive.sh</p>\n<p>添加：<br>export HIVE_HOME&#x3D;&#x2F;usr&#x2F;hive<br>export PATH&#x3D;$PATH:$HIVE_HOME&#x2F;bin:$HIVE_HOME&#x2F;sbin</p>\n<p>保存并退出<br>:wq</p>\n<p>刷新profile<br>source profile</p>\n<p>#前台启动（关闭ctrl+c）<br>hive –service metastore</p>\n<p>#后台启动 进程挂起（关闭使用jps + kill）<br>#输入命令回车执行 再次回车 进程将挂起后台<br>nohup &#x2F;export&#x2F;server&#x2F;hive&#x2F;bin&#x2F;hive –service metastore &amp;</p>\n<p>#前台启动开启debug日志<br>&#x2F;export&#x2F;server&#x2F;hive&#x2F;bin&#x2F;hive –service metastore –hiveconf hive.root.logger&#x3D;DEBUG,console</p>\n<p>启动hive总体流程<br>启动hive需要先启动集群：start-dfs.sh （前提是已经在&#x2F;etc&#x2F;profile.d&#x2F;文件夹下添加了hdfs.sh文件，若没有添加，则需要进入hadoop所在文件夹下，执行sbin&#x2F;start-dfs.sh）<br>再启动Metastore服务：nohup &#x2F;usr&#x2F;hive&#x2F;bin&#x2F;hive –service metastore &amp;（远程模式需要手动启动）<br>再启动hiveservver2：nohup &#x2F;usr&#x2F;hive&#x2F;bin&#x2F;hive –service hiveserver2 &amp;<br>再启动hive：bin&#x2F;beeline，在里面通过JDBC启动与hiveserver的连接：!connect jdbc:hive2:&#x2F;&#x2F;localhost:10000，输入用户名为主机的用户名，密码为用户密码。</p>\n"},{"title":"Spark","date":"2022-10-30T12:15:18.000Z","cover":"https://qiansen.oss-cn-hangzhou.aliyuncs.com/Spark.jpg","_content":"","source":"_posts/Spark.md","raw":"---\ntitle: Spark\ndate: 2022-10-30 20:15:18\ntags: 学习\ncover: https://qiansen.oss-cn-hangzhou.aliyuncs.com/Spark.jpg\ncategory: 学习\n---\n","slug":"Spark","published":1,"updated":"2022-11-10T14:50:54.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claca027500000sv8ebzo1d8u","content":"","site":{"data":{"links":[{"name":"yixin","link":"https://blog.yixinfangfa.top/","description":"","avatar":""},{"name":"GiriNeko的猫窝","link":" https://ineko.cc/","description":"一头会说话的咸鱼","avatar":"https://static.ineko.cc/images/favicon.png"}]}},"excerpt":"","more":""},{"title":"麒坑","date":"2022-11-11T10:17:17.000Z","_content":"","source":"_posts/麒坑.md","raw":"---\ntitle: 麒坑\ndate: 2022-11-11 18:17:17\ntags:\n---\n","slug":"麒坑","published":1,"updated":"2022-11-11T10:17:17.958Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claccjzoo0000zov8gaf07k97","content":"","site":{"data":{"links":[{"name":"yixin","link":"https://blog.yixinfangfa.top/","description":"","avatar":""},{"name":"GiriNeko的猫窝","link":" https://ineko.cc/","description":"一头会说话的咸鱼","avatar":"https://static.ineko.cc/images/favicon.png"}]}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"cl9770mto00011sw155mu5e03","category_id":"cl978kbsz0000g4w1ct9kdv2a","_id":"cl978kbt20001g4w138cnfcax"},{"post_id":"cl9770mts00031sw1cw298rlt","category_id":"cl9cegjcq0002uow175dp73sw","_id":"cl9cegjd80009uow12c39hvv3"},{"post_id":"cl9cegjci0000uow18li52ko0","category_id":"cl9cegjcq0002uow175dp73sw","_id":"cl9cegjd9000cuow17ihw3yx9"},{"post_id":"cl9cegjcn0001uow17ldz3x8g","category_id":"cl9cegjcq0002uow175dp73sw","_id":"cl9cegjda000fuow1ey8d8o5v"},{"post_id":"cl9cegjcu0004uow16od49zxj","category_id":"cl9cegjcq0002uow175dp73sw","_id":"cl9cegjda000guow1a97pauul"},{"post_id":"cl9co32mr0000nww11kin9eme","category_id":"cl9cegjcq0002uow175dp73sw","_id":"cl9co32mw0002nww1cnq13cmz"},{"post_id":"cl9psnbz3000138w140xa10i3","category_id":"cl9cegjcq0002uow175dp73sw","_id":"cl9psnbza000738w1ebo0afuw"},{"post_id":"cl9psnbz6000338w11o3chgq9","category_id":"cl9cegjcq0002uow175dp73sw","_id":"cl9psnbzb000838w16zzs5brb"},{"post_id":"claca027500000sv8ebzo1d8u","category_id":"cl9cegjcq0002uow175dp73sw","_id":"claca027900040sv882351sga"}],"PostTag":[{"post_id":"cl9770mto00011sw155mu5e03","tag_id":"cl9770mtt00041sw10wkrasq6","_id":"cl9770mtz000b1sw16ecs5kie"},{"post_id":"cl9770mts00031sw1cw298rlt","tag_id":"cl9770mty000a1sw1059pa85n","_id":"cl9770mu1000e1sw11wnua7wv"},{"post_id":"cl9cegjci0000uow18li52ko0","tag_id":"cl9770mty000a1sw1059pa85n","_id":"cl9cegjcu0003uow1hi640xax"},{"post_id":"cl9cegjcn0001uow17ldz3x8g","tag_id":"cl9770mty000a1sw1059pa85n","_id":"cl9cegjd20005uow12zel97nf"},{"post_id":"cl9cegjcu0004uow16od49zxj","tag_id":"cl9770mty000a1sw1059pa85n","_id":"cl9cegjd40006uow1dgoj1qeo"},{"post_id":"cl9co32mr0000nww11kin9eme","tag_id":"cl9770mty000a1sw1059pa85n","_id":"cl9co32mu0001nww1gt5i8243"},{"post_id":"cl9psnbz3000138w140xa10i3","tag_id":"cl9770mty000a1sw1059pa85n","_id":"cl9psnbz7000438w1c3x4eaae"},{"post_id":"cl9psnbz6000338w11o3chgq9","tag_id":"cl9770mty000a1sw1059pa85n","_id":"cl9psnbz9000638w1hmplfzm7"},{"post_id":"claca027500000sv8ebzo1d8u","tag_id":"cl9770mty000a1sw1059pa85n","_id":"claca027800020sv813zv4q22"}],"Tag":[{"name":"博客配置","_id":"cl9770mtt00041sw10wkrasq6"},{"name":"学习","_id":"cl9770mty000a1sw1059pa85n"},{"name":"日常","_id":"cl9770mu2000h1sw1ct7d5zg9"},{"name":"有感而发","_id":"cl9770mub000n1sw12aj66rwv"},{"name":"二次元","_id":"cl9cegjdf000nuow1c3b7d0on"}]}}